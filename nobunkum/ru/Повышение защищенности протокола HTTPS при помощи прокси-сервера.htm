<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"><head><script type="text/javascript" async="" src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/ga.js"></script><script src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app204.us.archive.org';v.server_ms=215;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.pc(0.001);
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://nobunkum.ru:80/ru/ssl","20180429053636","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1524980196");
</script>
<link rel="stylesheet" type="text/css" href="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Повышение защищенности протокола HTTPS при помощи прокси-сервера</title>
  <!-- base href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/" -->
  <link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/rss">
  <link rel="stylesheet" type="text/css" href="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/style.css">
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display: block; direction: ltr;">
</div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20180429053636/http://nobunkum.ru:80/ru/ssl</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://nobunkum.ru/ru/ssl","20180429053636",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
      <div class="subscribe">
        
<form action="/web/20180429053636/http://nobunkum.ru/ru/ssl" method="post">
<div>
<input class="mail" type="text" name="email" placeholder="newsletter">
<input type="hidden" name="groups[]" value="1">
<input class="submit" type="submit" value="OK"></div>
</form>
      </div>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/"><img src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li class="current"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div class="aside-long" style="text-align:center;padding:15px 10px">
      <span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=Exploit.SWF.Agent.br">Exploit.SWF.Agent.br</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=Pdfka.asd">Pdfka.asd</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=Pidief.cvl">Pidief.cvl</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=TDSS">TDSS</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=TDSS+removal">TDSS removal</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=binary+planting">binary planting</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=bios+infection">bios infection</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=blind+sqli">blind sqli</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=bootkit">bootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=bootkit+remover">bootkit remover</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=browser+exploitation">browser exploitation</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=com+hijacking">com hijacking</a></span>
<span class="tl-tag tl-tag-weight4"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=disassembling">disassembling</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=dll+hijacking">dll hijacking</a></span>
<span class="tl-tag tl-tag-weight2"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=drive-by+downloads">drive-by downloads</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=hack+online+banks">hack online banks</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=heap-spray">heap-spray</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=hijack+botnet">hijack botnet</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=ibank">ibank</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=kernel+protection">kernel protection</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=kernel-mode+rootkit">kernel-mode rootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=keylogger">keylogger</a></span>
<span class="tl-tag tl-tag-weight5"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=malware+analysis">malware analysis</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=rootkit+detection">rootkit detection</a></span>
<span class="tl-tag tl-tag-weight3"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=trojan">trojan</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/tags?tag=virus+removal">virus removal</a></span>
    </div>
    <div id="content_text" style="margin-top: -10px;">
<div id="content_title"><h1>Повышение защищенности протокола HTTPS при помощи прокси-сервера</h1></div>
<div id="article_author" class="author">Алексей Смирнов<br>Руководитель направления разработки и исследований Security Technology Research<br><a href="https://web.archive.org/web/20180429053636/mailto:arkenoi@gmail.com">arkenoi@gmail.com</a></div><br>

<div style="padding-left: 14px;">
<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#proxifying">Технологии проксирования SSL</a><br>
<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#https">Анализ проблем протокола HTTP</a><br>
	<div style="padding-left: 14px;">
	<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#certificates">Пользовательский интерфейс управления сертификатами</a><br>
	<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#vulnerabilities">Уязвимости в реализации и конфигурации протокола и прикладных библиотек</a><br>
	<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#extensions">Расширения X509v3 и автоматическая валидация сертификатов</a><br>
	<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#pki">Общие проблемы PKI в «большом плохом интернете»</a><br>

	</div>
<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#code">Show Me The Code: SSL Proxy</a><br>
	<div style="padding-left: 14px;">
	<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#specs">Особенности реализации и внедрения</a><br>
	<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#inspection">Инспекция содержимого для протокола HTTPS</a><br>
	</div>
<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#conclusions">Выводы</a><br>
<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">Список ссылок</a><br>

</div>
<br>

Протокол HTTPS, представляющий собой сочетание стандартного веб-протокола 
передачи данных HTTP и криптографического протокола SSL, является 
практически ровесником «всемирной паутины» в том виде, в котором мы ее 
знаем. Основываясь на традиционных возможностях криптографии с открытым  
ключом, он обеспечивает взаимную (а в большинстве практических применений 
- одностороннюю, то есть только для сервера) аутентификацию веб-сервера и 
клиента, криптографическую защиту конфиденциальности передаваемых данных и 
защиту их от возможной модификации. Протокол HTTPS разрабатывался вместе с 
публичной инфраструктурой открытых ключей (PKI) и системой корневых 
центров сертификации (Root CA).  
<br><br>
Несмотря на то, что технология HTTPS существует почти столько же, сколько 
протокол HTTP, который она дополняет, определенные классы проблем её 
реализации не решены до сих пор. А именно: 
<br><br>

1. Управление сертификатами реализовано без учета реальных потребностей пользователей (включая удобство пользования).
<br><br>
2. Реализация протокола SSL/TLS может содержать ошибки реализации и/или конфигурации.
<br><br>
3. Современные стандарты PKI не поддерживаются в должном объеме.
<br><br>

4. Шифрованные данные недоступны для инспекции сетевыми средствами.
<br><br>

Возникает вопрос: можно ли считать указанные проблемы именно проблемами 
реализации протокола, если один из пунктов - проблема пользовательского 
интерфейса, а другой - фундаментальное свойство протокола? С точки зрения 
пользователя, все перечисленные проблемы возникают во время использования 
протокола HTTPS в веб-браузере. Именно это и обусловило выбор такой, 
возможно, не совсем корректной формулировки. 

В тексте статьи применительно к криптографическому транспорту 
протокола HTTPS будет применяться термин SSL, а не TLS, так как стандарт 
TLS содержит некоторые расширения, использование которых мы не 
рассматриваем. В рамках данной статьи отличия TLS, используемого в 
протоколе HTTPS, от SSL версии 3.0 не имеют значения: оба могут 
применяться с одинаковым результатом.

<a id="a_title" name="proxifying" style="color:inherit;text-decoration: none;"><h2>Технологии проксирования SSL</h2></a> 

Широкие возможности по решению перечисленных проблем реализации HTTPS 
предоставляют технологии проксирования. 
<br><br>
Проксирующие приложения, реализующие инспекцию SSL с помощью метода 
«человек посередине», на настоящий момент распространены довольно широко. 
Однако все они специализируются на анализе содержимого защищенного трафика 
(то есть решают только четвертую проблему из вышеприведенного списка) и не 
предоставляют дополнительных функций по управлению сертификатами. 
<br><br>
В определенном смысле можно считать, что любое «вмешательство» в 
функционирование протокола SSL является нарушением его идеологии как 
протокола, обеспечивающего конфиденциальность, целостность и взаимную 
аутентификацию в режиме точка-точка. Однако в реальности, в последние годы 
требования к протоколу HTTPS изменились - подобно тому, как применение 
протокола HTTP значительно переросло уровень пятнадцатилетней давности, 
когда он использовался только для передачи несложных веб-страниц. Если в 
1995 году пользователь отправлял через HTTPS только свой номер кредитной 
карточки, и задачи протокола сводились к защите данных от перехвата, - то 
сейчас через HTTPS проходит трафик постоянно используемых приложений с 
комплексной архитектурой (таких как Gmail). Поэтому необходимо 
позаботиться не только о защите конфиденциальных данных, но и о том, чтобы 
пользователь не подцепил вирусов через интерфейс веб-приложения и 
продолжал получать адекватную защиту от других угроз. 
<br><br>

Алгоритм работы прокси-сервера, реализованной по методу «человек 
посередине», достаточно прост: 
<br><br>
1. Прокси-сервер принимает TCP-соединение от клиента и получает команду на 
установление соединения с сервером. 
<br><br>
2. Прокси-сервер устанавливает TCP-соединение с сервером и начинает SSL-сеанс.
<br><br>
3. Прокси-сервер получает от сервера информацию о сертификате и производит 
его верификацию, по результатам которой либо разрывает соединение, выдавая 
клиенту диагностическое сообщение об ошибке, либо генерирует собственный 
сертификат, используя для этого свой публичный ключ и служебную информацию 
от сервера, и при необходимости подписывая его сертификатом встроенного 
центра сертификации. 
<br><br>
4. Прокси-сервер начинает SSL-сеанс с клиентом, используя для этого новый сертификат.
<br><br>
5. Прокси-сервер принимает HTTP-запрос от клиента, передает его механизму 
инспекции содержимого и, при отсутствии ошибок и нарушений политики 
безопасности, передает HTTP-серверу. 
<br><br>
6. Прокси-сервер получает ответ от HTTP-сервера, передает его механизму 
инспекции содержимого и, при отсутствии ошибок и нарушений политики 
безопасности, передает  клиенту. 

Далее мы рассмотрим более подробно проблемы реализации HTTPS, 
перечисленные в предыдущем разделе, и возможности для их решения 
посредством технологий SSL-проксирования. 

<a id="a_title" name="https" style="color:inherit;text-decoration: none;"><h2>Анализ проблем протокола HTTP</h2></a> 

	<a id="a_title" name="certificates" style="color:inherit;text-decoration: none;"><h3><i>Пользовательский интерфейс управления сертификатами</i></h3></a>

Проблема корректности практического использования протокола HTTPS и 
связанные с этим особенности пользовательских интерфейсов состоит из 
большего количества аспектов, чем то позволяет рассмотреть формат данной 
статьи. Рассмотрим лишь основные проблемы, связанные с удобством для 
пользователя, и варианты их решения. 
<br><br>
Если в рамках интранет-решений мы можем более или менее успешно 
контролировать все аспекты реализации и внедрения протокола HTTPS, то в 
«большом грязном интернете» многое не только устроено не так, как нам 
хотелось бы, но и недоступно нашему влиянию. Так, по различным оценкам, от 
половины до двух третей сайтов, использующих протокол HTTPS, делают это не 
вполне корректно: при посещении таких сайтов возникают предупреждения 
браузера об ошибках<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[1]</a>. При этом с практической точки зрения интересны 
два момента: во-первых, эти ошибки почти бесполезны - пользователи их 
игнорируют<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[2]</a>. Во-вторых, есть как минимум один распространенный случай, 
когда мы можем позаботиться о пользователе за него.  
<br><br>
Для начала, вернемся от реализации к собственно задаче - подтверждению 
аутентичности сайта посредством сертификации. На деле это две совершенно 
разных задачи: 
<br>
<ul>
<li>Для сайтов, требующих повышенных мер безопасности (интернет-банкинг, 
платежные системы) - подтверждение соответствия сайта юридическому лицу. 
</li><li>Для всех остальных - защита от фишинговых махинаций: необходимо 
подтверждение того факта, что сайт, на который пользователь зашел сегодня 
- это тот же сайт, где он был вчера. 
</li></ul>

По-видимому, с точки зрения разработчиков браузеров, подобные нюансы не 
имеют значения: на все случаи жизни выдаётся довольно однообразного вида 
ошибка, которую, как было указано выше, пользователи склонны игнорировать. 

<br><br>
<center><img src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/ssl01.png" width="500"><br>Рисунок 1. Ошибка сертификата в окне браузера Firefox 3</center>
<br>

Приведенный на Рис. 1. пример представляет ещё не самых худший вариант 
отображения ошибки сертификата веб-браузером. К примеру, в Google Chrome 
вообще нет возможности добавить постоянное исключение для подобных ошибок. 
Учитывая то, что они встречаются достаточно часто, а также то, что 
пользователи склонны тем меньше обращать внимание на предупреждения, чем 
их больше, - налицо проблема информационной безопасности. 
<br><br>

Такое решение, как нетрудно понять, подстрахует пользователя от 
автоматического игнорирования ошибки, опасного с точки зрения его 
безопасности. В исключительном случае пользователь может обратиться к 
администратору, который в свою очередь примет квалифицированное решение об 
исправлении ошибочного сертификата, уведомлении владельца ресурса об 
ошибке, расследовании инцидента в случае реально происшедшей атаки типа 
«человек посередине», либо - в последнюю очередь - о внесении 
правила-исключения в настойки межсетевого экрана. 

<br><br>
<center><img src="%D0%9F%D0%BE%D0%B2%D1%8B%D1%88%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20%D0%BF%D1%80%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%20HTTPS%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BA%D1%81%D0%B8-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0_files/%D0%91%D0%B5%D0%B7%20%D0%B8%D0%BC%D0%B5%D0%BD%D0%B8.htm"><br>Рисунок 2. Выдача клиентом SSH предупреждения об изменившемся сертификате</center>
<br>

Подобная функциональность уже реализована в клиентах SSH. Для 
предупреждения об изменении веб-сертификатов ничто не мешает реализовать 
аналогичное поведение средствами технологии проксирования SSL. 
Единственную сложность при этом представляет необходимость реализации 
пользовательского интерфейса управления сертификатами, так как легитимные 
сертификаты тоже иногда меняются. Так как прокси-сервер является 
компонентом более сложной системы, встраивать такой механизм именно в 
прокси-сервер нецелесообразно. 


	<a id="a_title" name="vulnerabilities" style="color: inherit;text-decoration: none;"><h3>Уязвимости в реализации и конфигурации протокола и прикладных библиотек</h3></a> 


Решение проблемы потенциальной небезопасности самого протокола или 
прикладного ПО для работы с ним - типичная область применения прикладного 
межсетевого экрана, поэтому SSL-прокси весьма продуктивно принимает на 
себя эту функцию.  
<br><br>
Например, эффективная защита от уязвимости большей части прикладных 
библиотек для работы с сертификатами, продемонстрированной в июле 2009 
года исследователями Kaminsky и Marlinspike<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[3]</a>, реализуется простейшей 
проверкой всего лишь в несколько строк программного кода. Более того, эта 
проверка оказывается достаточно универсальной и, предположительно, будет 
эффективна также против других возможных ошибок парсера ASN.1, которые 
могли бы создать разночтения в длине интерпретируемых данных. 
<br><br>
Еще проще при помощи SSL-прокси контролируются такие потенциальные угрозы безопасности, как:
<ul>
<li>Устаревшие версии протокола SSL <a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[4]</a>
</li><li>Криптографически нестойкие хэш-функции в подписях сертификатов <a href="#reference">[5]</a>

</li><li>Использование криптографически нестойких алгоритмов шифрования.
</li></ul>
Следует, впрочем, отметить, что это решение - не панацея: так, 
обнаруженная в конце 2009 года атака на пересогласование TLS-сеанса 
принципиально необнаружима <a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[6]</a> со стороны клиента. Главная задача 
SSL-прокси, как и других технологий межсетевого экранирования, заключается 
в создании единой точки контроля, не заменяющей, а дополняющей управление 
конфигурацией и изменениями. 
<br><br>

К проблеме криптографически нестойких алгоритмов мы вернемся в следующей 
части, так как она затрагивает не только свойства конкретного сертификата, 
но и обработку всей цепочки доверия. 

	<a id="a_title" name="extensions" style="color: inherit;text-decoration: none;"><h3>Расширения X509v3 и автоматическая валидация сертификатов</h3></a>


Расширения X509 версии 3 хорошо известны любому, кто занимался построением 
сервисной архитектуры информационных систем, развертыванием больших 
виртуальных частных сетей и, наверное, любыми другими сложными случаями 
внедрения PKI, кроме: собственно, веб-сервисов. Такой странный «перекос» 
обусловлен удивительным фактом: веб-браузеры не имеют полноценной 
поддержки этого общепринятого и уже далеко не нового (IETF RFC2459, 1999 
год <a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[7]</a>) стандарта! Фактически, поддержка PKI в браузерах ограничивается 
довольно ненадежной реализацией протокола OCSP, проверкой разрешенных 
целей использования серитификата удостоверяющего центра (Basic 
Constraints), альтернативных имен и практически нефункциональным (а 
именно, настраиваемым вручную и пригодным только для интранета) механизмом 
использования списков отозванных сертификатов (CRL). Валидация 
сертификатов в рамках протокола SSL/TLS производится согласно 
представляемой сервером фиксированной «цепочке доверия», чего зачастую 
недостаточно.  

<br><br>
Рассмотрим ситуацию более подробно на примере произвольно взятого «в дикой 
природе» сертификата, в котором присутствуют интересующие нас расширения.  

<br>

<pre><font size="2">
Certificate: 
    Data: 
        Version: 3 (0x2) 
        Serial Number: 
            1a:40:d3:01:00:00:00:00:22:d9 
        Signature Algorithm: sha1WithRSAEncryption 
        Issuer: DC=ru, DC=yandex, DC=ld, CN=YandexExternalCA 
        Validity 
            Not Before: Aug 25 11:55:37 2009 GMT 
            Not After : Aug 25 11:55:37 2011 GMT 
        Subject: C=RU, L=Moscow, O=OOO Yandex, OU=money.yandex.ru, CN=Yandex.Money 
        Subject Public Key Info: 
            Public Key Algorithm: rsaEncryption 
            RSA Public Key: (1024 bit) 
                Modulus (1024 bit): 
                    00:bd:bf:56:ca:2d:8a:00:20:6e:a8:24:ca:32:3c: 
                    6c:b9:9b:f2:9c:c2:10:40:01:0d:94:63:8a:10:51: 
                    79:0b:70:29:d5:14:f8:65:7f:ca:36:a9:76:9b:30: 
                    e2:e5:e6:e5:3c:bf:4b:f5:23:7c:c6:c6:7a:c3:de: 
                    fa:76:da:63:56:27:69:e1:53:6c:97:89:9b:19:54: 
                    03:df:c6:45:f6:9c:07:81:c9:45:05:42:de:ff:3f: 
                    25:99:c0:27:6a:2d:4b:02:a0:79:0a:5e:d7:7e:e9: 
                    33:46:ee:bb:28:a0:74:59:c7:56:c8:80:b8:c9:ed: 
                    46:36:4f:de:69:df:d8:69:4f 
                Exponent: 65537 (0x10001) 

        X509v3 extensions: 
            X509v3 Basic Constraints: critical 
                CA:FALSE 
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment 
            X509v3 Subject Alternative Name: 
                DNS:money.yandex.ru, DNS:promo.yandex.ru 
            X509v3 Subject Key Identifier: 
                64:95:3A:17:8F:60:C4:42:BE:19:AF:06:9E:3A:50:2B:DA:98:4B:B5 
<font color="red">
            X509v3 Authority Key Identifier: 
                keyid:DB:41:27:30:4F:1A:F5:5B:3E:84:56:C8:EC:85:98:B3:51:2C:2D:27 

            X509v3 CRL Distribution Points: 
                URI:HTTP://crls.yandex.ru/YandexExternalCA/YandexExternalCA.crl 

            Authority Information Access: 
                CA Issuers - URI:HTTP://crls.yandex.ru/YandexExternalCA/YandexExternalCA.der 
</font>
            1.3.6.1.4.1.311.21.7: 
                00.(+.....7.....&amp;...U...-.............7....(..d... 
            X509v3 Extended Key Usage: 
                TLS Web Server Authentication 
            1.3.6.1.4.1.311.21.10: 
                0.0 
..+....... 
    Signature Algorithm: sha1WithRSAEncryption 
        99:2d:66:d7:7f:26:6b:69:66:5d:fa:3c:8d:53:5e:e1:0a:e1: 
        68:78:25:d1:e6:b6:94:b6:43:11:90:cb:2b:93:69:fb:f6:82: 
        26:7b:60:8b:5d:b7:ec:0a:9b:2d:b2:e2:22:5d:04:d8:2b:2a: 
        04:0d:43:de:e8:b7:2c:e3:91:19:98:e0:4a:53:b6:15:e9:4a: 
        e2:84:19:11:9e:e2:86:02:74:7a:c4:36:8e:07:fc:b8:f9:c3: 
        23:22:d5:a9:63:c4:9b:a9:e9:1a:9b:97:0a:0a:94:02:23:5b: 
        9c:1c:58:14:2d:b7:7f:00:11:07:c0:c3:a1:a9:22:4c:06:09: 
        11:54:da:6a:76:27:d0:e9:e4:5d:40:f0:54:3f:14:7b:39:f3: 
        ae:52:83:8d:6b:9e:fb:c1:3b:ef:bb:f6:a4:aa:64:ba:60:f3: 
        1c:a0:48:da:aa:e3:f5:38:d3:e3:2c:14:49:6e:f3:01:df:04: 
        ef:62:59:15:a8:18:29:a1:8e:fa:da:38:1d:16:34:55:9a:ce: 
        e5:1c:d1:7b:db:3f:27:ca:6d:ef:49:b6:0c:3d:64:f0:cb:06: 
        aa:a9:aa:de:53:f2:2b:02:1f:c4:e7:d6:98:39:5e:cf:bc:9f: 
        79:55:6e:2f:4e:0e:f9:2f:20:0f:b6:c5:5b:26:c0:ff:c8:97: 
        39:c8:ab:f1 
</font></pre>

Этот сертификат принадлежит сервису Яндекс.Деньги. Остановимся подробнее 
на интересующих нас расширениях (отмечены цветом шрифта). 
<br><br>
<ul>
<li>Authority Key Identifier (AKID). Этот идентификатор указывает, каким 
сертификатом подписан рассматриваемый нами сертификат. Механизм аналогичен 
поиску сертификата, поле Subject которого соответствует полю Issuer 
данного сертификата.  
<br><br> Почему именно этот способ поиска удостоверяющего сертификата 
рекомендуется в настоящее время? Тому есть несколько причин. Во-первых, в 
случае перевыпуска сертификата AKID однозначно идентифицирует искомый 
публичный ключ, поэтому исключена путаница между «старым» и «новым» 
сертификатами с одинаковым полем Subject. А, во-вторых, современный 
стандарт PKI предполагает специальное использование сертификатов, имеющих 
одинаковую ключевую информацию, но разные информационные поля, для 
установления сложных взаимоотношений доверия между иерархиями 
сертификации. Поэтому важно, чтобы мы могли идентифицировать сертификат 
именно по ключу и выбирать подходящий из нескольких вариантов. <a href="#reference">[8]</a>
<br><br>
</li><li>CRL distribution points. Это URL, по которому можно получить список 
отозванных сертификатов, в данном случае - по протоколу HTTP. 

<br><br>CRL через HTTP - весьма медленный способ уведомления об отзыве 
сертификатов: типовое время обновления составляет несколько часов. Объем 
«списка отзыва» может быть значительным, до десятков и сотен килобайт. 
Поэтому веб-браузеры обращаются только к тем спискам, использование 
которых было указано явно в пользовательских настройках. 
<br><br>
</li><li>Authority Information Access (AIA). В этом расширении указывается, где 
можно получить информацию об издателе сертификата. 
<br><br>Вместо этого механизма, как уже упоминалось, веб-приложения либо 
используют предварительно построенные «цепочки доверия», полученные при 
установлении связи по протоколу SSL/TLS, либо полагаются на то, что все 
необходимые дополнительные сертификаты уже есть в хранилище браузера. 

</li></ul>

Какие преимущества дает использование SSL-прокси применительно к проблеме 
поддержки  расширений X509v3? Мы можем подключить готовую библиотеку 
валидации сертификатов (в нашем случае был использован <a href="https://web.archive.org/web/20180429053636/http://www.carillon.ca/tools/pathfinder.php">Carillon 
Pathfinder</a>) и, таким образом,  
реализовать следующие функции, отсутствующие в веб-браузере: 
<ul>
<li>Корректную валидацию согласно RFC5280<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[8]</a> с использованием информации AKID

</li><li>Кэширование с целью экономии трафика и использование CRL
</li><li>Автоматическое получение недостающих сертификатов промежуточных удостоверяющих центров с помощью AIA
</li><li>Настраиваемые политики обработки цепочек доверия, содержащих 
«слабые» звенья, связанные с применением криптографически 
нестойких хэш-функций. 
</li></ul>
На практике все это означает, что пользователь будет реже получать 
ложные сообщения об ошибках сертификатов, и наоборот, будет защищен в 
ситуациях, когда стандартное ПО не обнаружит потенциально небезопасную 
ситуацию. 


	<a id="a_title" name="pki" style="text-decoration: none;color: inherit;"><h3>Общие проблемы PKI в «большом плохом интернете»</h3></a> 



Общее положение дел с публичной инфраструктурой открытых ключей отнюдь не 
безоблачно. Фундаментальной проблемой в данном случае является то, что, 
если любой значимый компонент публичной сети доверия, основанной на 
общепризнанных удостоверяющих центрах, оказывается скомпрометирован, это 
приводит к крушению всей системы. А значимыми компонентами в ней являются 
не только первичные удостоверяющие центры, но и все те промежуточные, 
которые были уполномочены первичными подписывать другие сертификаты.  
<br><br>
При этом, чтобы скомпрометировать систему, не обязательно вмешательство 
злоумышленника в функционирование удостоверяющего центра. Достаточно, 
чтобы слабым звеном в цепочке доверия оказался, например, криптографически 
нестойкий хэш-алгоритм,что, увы, является не теоретической, а вполне 
практической угрозой. Еще в 2009 году некоторые корневые удостоверяющие 
центры продолжали использовать устаревший алгоритм MD5, а если и 
прекращали, то оставалось большое количество неотозванных 
MD5-сертификатов. Поэтому специальное внимание при разработке нашего 
решения для SSL-проксирования было уделено исключению подобных слабых 
звеньев. Для снижения подобных рисков также может использоваться 
упомянутый выше параметр расширения Basic Constraints, ограничивающий 
возможную длину цепочки сертифкатов для конкретного удостоверяющего 
центра. С другой стороны, распространены случаи «ложной тревоги», когда 
слабый алгоритм использовался для самоподписи корневого сертификата, что 
само по себе не представляет угрозу безопасности.   
<br><br>

Также, в «большом плохом интернете» используется значительное количество 
не вполне корректно сформированных с точки зрения x509v3 сертификатов. Это 
обычно не представляет проблемы, так как веб-браузеры не содержат 
функциональности, на которую эта некорректность могла бы повлиять.  
<br><br>
Все это достаточно сильно отличается от «тепличных» условий интранета, в 
котором все компоненты PKI находятся если не под единым контролем, то хотя 
бы вписываются в обозримые рамки.  


<a id="a_title" name="code" style="text-decoration: none;color: inherit;"><h2>Show Me The Code: SSL Proxy</h2></a> 

Автором был разработан прокси-сервер для SSL. Продукт SSL Proxy существует в двух вариантах:
<br><br>
1.Бесплатный пакет с исходным кодом (open source). Распространяется в 
рамках проекта <a href="https://web.archive.org/web/20180429053636/http://openfwtk.sf.net/">OpenFWTK</a> в виде компонента http-gw, 
под лицензией «Old BSD with advertisement clause».  

<br><br>
2.Коммерческий встраиваемый компонент для межсетевых экранов и DLP-систем.
<br><br>
В состав программы входит ПО <a href="https://web.archive.org/web/20180429053636/http://www.carillon.ca/tools/pathfinder.php">Carillon Pathfinder</a>, распространяемое 
под лицензией GNU LGPL. 


	<a id="a_title" name="specs" style="text-decoration: none;color: inherit;"><h3>Особенности реализации и внедрения</h3></a> 


Очевидно, что хороший продукт для обеспечения безопасности не должен 
изменять привычное для пользователя программное окружение сверх безусловно 
необходимого - по крайней мере, с точки зрения пользовательского 
интерфейса. Этим принципом мы и руководствовались при создании SSL Proxy. 
С точки зрения веб-браузера и пользователя, при типовом сценарии внедрения 
SSL Proxy работает следующим образом: 
<br>
<ul>
<li>Самоподписанные сертификаты остаются таковыми. Для них лишь создается 
новый ключ, и возможен контроль непредусмотренной подмены. 
</li><li>Для мобильных клиентов, использующих разные точки выхода в сеть, во 
избежание конфликтов серийные номера «новых» сертификатов отличаются от 
&lt;настоящих&gt; согласно предсказуемому алгоритму. 

</li><li>Допустимые согласно политики безопасности ошибки сертификатов (такие 
как истекший срок действия и др.) транслируются без изменений, с 
сохранением всех диагностических сообщений. 
</li><li>Сертификаты, подписанные неизвестными удостоверяющими центрами, 
содержат в поле Issuer строку «UNVERIFIED», что позволяет веб-браузеру 
выдавать диагностику, аналогичную той, которую можно получить при «прямом» 
подключении. 
</li><li>Возможны гибкие настройки исключений: например, для применения 
авторизации по клиентским сертификатам, обеспечения поддержки 
нестандартных алгоритмов шифрования клиентом, или для доступа к сайтам с 
защитой приватности пользователей (таких как интернет-банкинг). 
</li></ul>


	<a id="a_title" name="inspection" style="text-decoration: none;color: inherit;"><h3>Инспекция содержимого для протокола HTTPS</h3></a> 


Это базовая функциональность, ради которой, в основном, и были написаны 
все существующие реализации технологии проксирования SSL: инспекция 
содержимого защищенного трафика по принципу «человек посередине». 
Прикладные особенности реализации данной технологии в программе SSL Proxy 
заключаются, прежде всего, в использовании интерфейса к дешифрованной 
сессии, доступного непосредственно для механизма инспекции контента: DLP, 
антивируса, системы ведения архива и т.п. На настоящий момент наиболее 
широко распространенным стандартом на такой интерфейс является протокол 
i-cap (Internet Content Adaptation Protocol<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/ssl#reference">[9]</a>) - он и был использован в 
рассматриваемом продукте.




<a id="a_title" name="conclusions" style="text-decoration: none;color: inherit;"><h2>Выводы</h2></a> 


Мы рассмотрели актуальные проблемы и угрозы безопасности, возникающие при 
использовании протокола HTTPS, и возможность их решения при помощи 
технологии SSL-проксирования. Как показано в данной статье, использование 
проксирующего SSL сервера отлично себя оправдывает, повышая уровень 
защищенности браузера без создания дополнительных неудобств для 
пользователя. Возможно, в скором времени эволюция веб-браузеров позволит 
им решать поднятые в данной статье проблемы встроенными средствами - и тем 
не менее, заслуженное место для HTTPS-прокси в системе обеспечения сетевой 
безопасности всегда найдется.

<a id="a_title" name="reference" style="text-decoration: none;color: inherit;"><h2>Список ссылок</h2></a> 

1. <a href="https://web.archive.org/web/20180429053636/http://www.darkreading.com/security/encryption/showArticle.jhtml?articleID=212500786">Researcher: Poor SSL Implementations Leave Many Sites At Risk.</a> DarkReading.com
<br>
2. J. Sunshine, S. Egelman et al. <a href="https://web.archive.org/web/20180429053636/http://www.usenix.org/events/sec09/tech/full_papers/sunshine.pdf">Crying Wolf: An Empirical Study of SSL Warning Efectiveness.</a> 
<br>
3. M. Marlinspike. <a href="https://web.archive.org/web/20180429053636/http://www.blackhat.com/presentations/bh-usa-09/MARLINSPIKE/BHUSA09-Marlinspike-DefeatSSL-PAPER1.pdf">Null Prefix Attacks Against SSL/TLS Certificates.</a>

<br>
4. <a href="https://web.archive.org/web/20180429053636/http://osvdb.org/56387">56387 : SSLv2 Protocol Multiple Weaknesses.</a> OSVDB.org
<br>
5. A. Sotirov, M. Stevens et al. <a href="https://web.archive.org/web/20180429053636/http://www.win.tue.nl/hashclash/rogue-ca/#sec5">MD5 considered harmful today: Creating a rogue CA certificate</a> 
<br>
6. T. Zoller. <a href="https://web.archive.org/web/20180429053636/http://www.g-sec.lu/practicaltls.pdf">TLS/SSLv3 renegotiation vulnerability explained</a>
<br>
7. RFC2459. <a href="https://web.archive.org/web/20180429053636/http://www.ietf.org/rfc/rfc2459.txt">Internet X.509 Public Key Infrastructure Certificate and CRL Profile</a>

<br>
8. RFC5280. <a href="https://web.archive.org/web/20180429053636/http://www.ietf.org/rfc/rfc5280.txt">Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</a>
<br>
9. RFC3507. <a href="https://web.archive.org/web/20180429053636/http://www.ietf.org/rfc/rfc3507.txt">Internet Content Adaptation Protocol (ICAP)</a>

<p class="author" style="padding-left: 0px;"><br>Last updated: 17.03.2012</p>

</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20180429053636/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20180429053636/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20180429053636/http://nobunkum.ru/rss">/rss</a></p>
  </div>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-3546318-9']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://web.archive.org/web/20180429053636/https://ssl' : 'https://web.archive.org/web/20180429053636/http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


</body></html>
<!--
     FILE ARCHIVED ON 05:36:36 Apr 29, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:21:39 May 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.655
  exclusion.robots: 0.166
  exclusion.robots.policy: 0.158
  esindex: 0.008
  cdx.remote: 4.38
  LoadShardBlock: 44.154 (3)
  PetaboxLoader3.datanode: 94.496 (4)
  load_resource: 133.63
  PetaboxLoader3.resolve: 72.189
-->