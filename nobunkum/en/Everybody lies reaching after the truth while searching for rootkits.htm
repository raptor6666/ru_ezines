<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"><head><script type="text/javascript" async="" src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/ga.js"></script><script src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app221.us.archive.org';v.server_ms=741;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.pc(0.001);
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://nobunkum.ru:80/analytics/en-everybody-lies","20180418182613","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1524075973");
</script>
<link rel="stylesheet" type="text/css" href="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Everybody lies: reaching after the truth while searching for rootkits</title>
  <!-- base href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/" -->
  <link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/rss">
  <link rel="stylesheet" type="text/css" href="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/style.css">
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display: block; direction: ltr;">
</div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20180418182613/http://nobunkum.ru:80/analytics/en-everybody-lies</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://nobunkum.ru/analytics/en-everybody-lies","20180418182613",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
      <div class="subscribe">
        
<form action="/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies" method="post">
<div>
<input class="mail" type="text" name="email" placeholder="newsletter">
<input type="hidden" name="groups[]" value="1">
<input class="submit" type="submit" value="OK"></div>
</form>
      </div>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/"><img src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li class="current"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div class="aside-long" style="text-align:center;padding:15px 10px">
      <span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=Exploit.SWF.Agent.br">Exploit.SWF.Agent.br</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=Pdfka.asd">Pdfka.asd</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=Pidief.cvl">Pidief.cvl</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=TDSS">TDSS</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=TDSS+removal">TDSS removal</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=binary+planting">binary planting</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=bios+infection">bios infection</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=blind+sqli">blind sqli</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=bootkit">bootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=bootkit+remover">bootkit remover</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=browser+exploitation">browser exploitation</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=com+hijacking">com hijacking</a></span>
<span class="tl-tag tl-tag-weight4"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=disassembling">disassembling</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=dll+hijacking">dll hijacking</a></span>
<span class="tl-tag tl-tag-weight2"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=drive-by+downloads">drive-by downloads</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=hack+online+banks">hack online banks</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=heap-spray">heap-spray</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=hijack+botnet">hijack botnet</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=ibank">ibank</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=kernel+protection">kernel protection</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=kernel-mode+rootkit">kernel-mode rootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=keylogger">keylogger</a></span>
<span class="tl-tag tl-tag-weight5"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=malware+analysis">malware analysis</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=rootkit+detection">rootkit detection</a></span>
<span class="tl-tag tl-tag-weight3"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=trojan">trojan</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/tags?tag=virus+removal">virus removal</a></span>
    </div>
    <!-- http://nobunkum.ru/everybody-lies/index.html -->
<div style="margin-top: -10px;">
<h1 id="content_title">Everybody lies: reaching after the truth while searching for rootkits.</h1>
<div id="article_author" class="author">Alisa Esage<br><a href="https://web.archive.org/web/20180418182613/http://twitter.com/alisaesage" target="_blank">@alisaesage</a></div>
<div id="article_author" class="author">Dmitry Oleksiuk<br><a href="https://web.archive.org/web/20180418182613/mailto:dmitry@esagelab.ru">dmitry@esagelab.ru</a></div>
<ul class="toc">
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#intro">Intro</a></li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#standard">Common ways to reach the truth</a>
<ul>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#global">Global unhooking</a></li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#deeper">Getting deeper</a></li>
</ul>
</li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#solution">The alternative</a>
<ul>
<ul>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#details">Details</a></li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#downsides">Limitations</a></li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#bypassing">Defeating</a></li>
</ul>
</ul>
<ul>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#advantages">Advantages </a></li>
</ul>
</li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#outro">Outro</a></li>
<li><a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#reference">Reference</a></li>
</ul>
<h2 id="intro">Intro</h2>
<div class="aside">
<h4>The article is also available in <a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/ru/everybody-lies">Russian</a></h4>
</div>
<p>A rootkit hunter’s main goal – hunter being a human or a machine – 
boils down to retrieving genuine information about a possibly 
compromised system, as a ground for subsequent judging on its health 
state. But, because a rootkit’s main goal – that is, hiding the real 
state of things – is quite opposite to that by design, a rootkit hunter 
is bound to presume falsity of all kinds of information underlying 
his/her/its judgements, and to constantly strain after sources of 
information which may be considered trusted in an obscure environment of
 a possibly compromised system.</p>
<p>To put it short, choosing the right source of information is the 
cornerstone of the Rootkits Detection Quest. And it is also an 
ever-developing process, because what ever used to be a right source of 
information turns into a liar after some time and some steps of rootkits
 evolution.</p>
<p>In the following article we will introduce a new technique aiming to 
retrieve true information about a possibly compromised system, a 
technique which we consider an easier and healthier alternative to 
existing techniques with the same purpose. We will first briefly discuss
 advantages and limitations of known approaches to gathering system 
information, which are widely used in common antivirus and anti-rootkit 
solutions. After that we will proceed to the suggested alternative 
technique details, its pros and cons, known ways to defeat the 
technique, and a modest reference to its implementation in a real 
anti-rootkit utility.</p>
<h2 id="standard">Common ways to reach the truth</h2>
<p>Existing antivirus and anti-rootkit solutions implement various 
approaches to rootkit detection, such as matching system information 
output from different sources (‘cross-view’), or code/structures 
integrity checking either by comparing them to a trusted model or by 
searching for generic anomalies.</p>
<p>Regardless of a specific rootkit detection approach implemented in a 
protective software, their developer’s options for a mechanism of 
retrieving genuine information about current system state are quite 
limited. In fact, there exist two mechanisms that allow reaching the 
truth from inside a system, detouring possibly subverted system 
structures.</p>
<ol>
<li>Restoring kernel code in locations suspected of being modified by a rootkit, system-wide (that is, <strong>global unhooking</strong>) prior to gathering system information.</li>
<li>Gathering information from a <strong>deeper</strong> level of system architecture than the assumed deepest level of a rootkit’s residence.</li>
</ol>
<h3 id="global">Global unhooking</h3>
<p>Global unhooking is the way to neutralize rootkit activity 
system-wide. Usually, this includes restoration of the SDT, of some code
 at the beginning of kernel functions pointed from the SDT, of IRP 
handlers, and, generally, of any system structures suspected of a 
modification causing output data forgery (see red code on Fig.1.).</p>
<div class="figure"><img src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/el1.gif" alt="Fig.1. Rootkit modification of kernel">
<p>Fig.1. Rootkit modification of kernel</p>
</div>
<p>During system code restoration, a developer faces three difficult points.</p>
<div class="aside">
<p>Splicing: inline modification of a function code causing execution flow redirection (usually a jmp or a call)</p>
</div>
<ol>
<li>Locating or calculating veritable pointers to system calls, to IRP 
handlers etc., which are necessary for restoration of original execution
 paths. Likewise, locating original system executables necessary for 
restoration of possibly <em>spliced</em> system code at specific locations.</li>
<li>Telling bad hooks that need to be removed, from legitimate hooks installed by system applications such as firewalls.</li>
<li>Safe writing of data found at pt.1, to locations found at pt.2. The 
problem here is that writing of data to kernel executable regions which 
are constantly in use by system may result in BSOD in certain 
conditions.</li>
</ol>
<p>The only advantage of global unhooking is that, if performed safely 
and successfully, it allows complete neutralization of some rootkits, 
restituting to all applications their ability to obtain true 
information.</p>
<p>At the same time, global unhooking approach has a number of significant limitations.</p>
<ol>
<li><strong>Unsafe</strong>. Global unhooking implies to manipulations 
with pointers in kernel code which is invoked system-wide, which is a 
risky operation by design.</li>
<li><strong>Unreliable</strong>. A rootkit may re-install its global hooks at any time.</li>
<li><strong>Unsystematical</strong>. Specific code locations to be 
restored must be indicated, which enables a rootkit developer to exploit
 locations unforeseen by anti-rootkit.</li>
<li><strong>Tedious</strong>. Finding original pointers to functions, and telling bad hooks from good hooks, is not a simple quest.</li>
</ol>
<p>Given the limitations, we can assert that global unhooking is more of
 a primitive reaction to known threats than of a truth seeker’s 
universal solution. Also because of insecurity, this approach is never 
implemented in earnest antivirus solutions.</p>
<h3 id="deeper">Getting deeper</h3>
<p>Because Windows architecture is layered, information can be gathered 
from multiple points of a call chain. Thus, an anti-rootkit that wants 
to request system information can detour modified system structures 
forging information by invoking more profound system mechanisms than 
those possibly compromised.</p>
<p>This approach, being definitely much safer and far more universal than the previous, is limited in other significant ways.</p>
<ol>
<li><strong>Labour-intensive</strong>. When getting deeper, it is 
necessary to implement all the data abstractions and conversions 
normally provided by higher level mechanisms.</li>
<li><strong>Strategically ineffective</strong>. Because getting deeper 
is rather avoidance than a solution, it only motivates rootkit 
developers to get deeper too, dealing with which will then require even 
more labour-intensive solutions from a protection developer</li>
.</ol>
<p>Here is an example of a typical armaments drive: rootkit hooking 
system calls to hide files –anti-rootkit invoking file system driver – 
rootkit hooking file system driver IRPs – anti-rootkit invoking disk 
driver, and so on.</p>
<p>The resulting situation now is that a protection developer wants to 
emulate the whole operating system to succeed in skirting a rootkit.</p>
<h2 id="solution">The alternative</h2>
<p>Among all the untrustworthy sources of information, a self is 
probably the least untrustworthy. So we are going to make an 
anti-rootkit perform system calls on its own, by providing an 
anti-rootkit with its own clean kernel copy. In general, this is a 
low-cost way to retrieve truth by detouring possibly compromised system 
mechanisms without risking system safety.</p>
<p>Running your own kernel, obtained and established properly, will 
allow reliable detection of majority of modern kernel malware. More 
exactly, a light-weight implementation of kernel copy (which is 
described in this article) will allow detection of hidden objects caused
 by SDT-hooking and kernel code splicing rootkits, while a more complex 
implementation (sophisticating up to maintaining copies of a file system
 and network driver stacks) may allow detection of almost any known 
kernel malware type.</p>
<h3 id="details">Details</h3>
<p>While sounds fearfully complex, basic implementation of a working 
kernel copy in Windows is fairly easy. General steps to achieve this are
 as follows.</p>
<ol>
<li><strong>Find</strong> necessary executable files. <br> For a minimal
 working kernel, take the main kernel file (ntoskrnl.exe in majority of 
cases) and hal.dll. The most reliable way to locate kernel files is 
provided by hardware configuration analysis, detailed below.</li>
<li><strong>Load</strong> the files into kernel memory. <br> Remember that best practice for reading a kernel file is provided by direct reading from the disk, to ensure file authenticity.</li>
<li><strong>Relocate</strong> properly all the calls and data accessing code inside the kernel mapping. <br>
 Normally, all global variables in the kernel copy should be 
re-initialized manually. However, for a minimal kernel copy 
implementation, manual initialization is crucial only to certain 
variables, such as pIofCallDriver and pIofCompleteRequest, which are 
likely to be pointing to malicious code in the real kernel. Remaining 
variables can be retrieved from the real kernel.</li>
<li><strong>Disable system notifications</strong> (both system-wide and 
locally) to ensure that no hidden data slips via legitimate callback 
mechanisms. This can be done by patching ExReferenceCallBackBlock so 
that it always returned 0.</li>
<li><strong>Redirect</strong> kernel calls from your own driver to the local kernel copy.</li>
</ol>
<div class="figure"><img src="Everybody%20lies%20reaching%20after%20the%20truth%20while%20searching%20for%20rootkits_files/el2.gif" alt="Fig.2. Duplicated kernel execution flow">
<p>Fig.2. Duplicated kernel execution flow</p>
</div>
<div class="aside">
<p>PAE = Physical Address Extension</p>
</div>
<p>Because we should assume that straightforward sources for the main 
kernel file path/name (such as boot.ini file or 
HKLM\System\CurrentControlSet\Control\SystemStartOptions “KERNEL” 
registry key) might be easily spoofed by a rootkit, it is suggested to 
use a smarter algorithm including hardware configuration analysis for 
locating the main kernel filename. The latter is defined by two system 
parameters: number of processors installed, and <em>PAE</em> support.</p>
<table border="1" cellspacing="0" cellpadding="4">
<tbody>
<tr bgcolor="#CCCCCC">
<td>Kernel Name</td>
<td>PAE support</td>
<td>Multiprocessor support</td>
</tr>
<tr>
<td>ntoskrnl.exe</td>
<td align="center">No</td>
<td align="center">No</td>
</tr>
<tr>
<td>ntkrnlpa.exe</td>
<td align="center">Yes</td>
<td align="center">No</td>
</tr>
<tr>
<td>ntkrnlmp.exe</td>
<td align="center">No</td>
<td align="center">Yes</td>
</tr>
<tr>
<td>ntkrpamp.exe</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
</tr>
</tbody>
</table>
<h3 id="downsides">Limitations</h3>
<ol>
<li>Some hiding malware can not be detected this way by design. <br>The list includes malware that implements IRP hooks and filter drivers to hide.</li>
<li>There is no trivial way to immediately remove kernel copy on process
 exit, because it may be still in use by some system threads. The 
suggested solution is to drop kernel code in memory after saving its 
address in the registry, so that in case the anti-rootkit is loaded 
again, it will not litter kernel memory.</li>
<li>It is not reliable to remove hidden files and registry keys while 
rootkit body and hooks are still present in memory, since hidden objects
 can be restored by a rootkit. The suggested solution is to initiate 
immediate reboot (more exactly, a hard reset) after deleting hidden 
objects.</li>
</ol>
<h3 id="bypassing">Defeating</h3>
<p>Ways to defeat the suggested technique boil down to either 
falsification or blocking of external information sources which we rely 
upon. That is, of files used to build a kernel copy. How could a rootkit
 possibly do that?</p>
<ul>
<li>A rootkit might push a patched ntoskrnl.exe upon file reading request for this file. <br> Solution: checking a kernel file’s Microsoft signature will ensure code integrity.</li>
<li>Spoofing filenames instead of content. <br>Solution: retrieval of path/names via analyzing hardware configuration, described earlier.</li>
<li>Blocking access to kernel files. <br>Hardly possible, because this will derange certain legitimate software.</li>
</ul>
<h3 id="advantages">Advantages</h3>
<ol>
<li><strong>Safety</strong>. Manipulating a kernel copy before it is set
 into operation is as safe as own driver manipulations. At the same 
time, manipulating system kernel which is already in use is an extremely
 risky operation regardless of precautions.</li>
<li><strong>Reliability</strong>. A rootkit will never install/restore hooks in a local kernel, since it is not a public establishment.</li>
<li><strong>Purity</strong>. Kernel code which is manually retrieved 
from the disk and then installed and invoked locally with proper 
foresight can be guaranteed of integrity. Thus, any data retrieval 
performed via a kernel copy, will output clean data unless the very data
 source is modified.</li>
</ol>
<h2 id="outro">Outro</h2>
<p>Not presenting another unsound panacea, the approach suggested in 
this article provides a cheap and safe way to detect rootkit activity 
caused by kernel code modification – the latter implying to prevalent 
majority of existing rootkits.</p>
<p>To prove practical usability of the suggested technique, we developed
 a freeware anti-rootkit tool based on it entirely. The tool is 
currently adjusted to detection of the TDSS rootkit<a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#reference">[1]</a>, though is a general anti-rootkit by design. The tool is named Rootkit.Win32.TDSS remover and is available for download online<a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/analytics/en-everybody-lies#reference">[2]</a>.</p>
<p>In spite of the fact that effective realization of the suggested 
approach is quite easy, it is never implemented in existing ant-malware 
solutions. At least, we have never heard of such. If you know of any 
software using the technique described in this article, please let us 
know.</p>
<h2 id="reference">Reference</h2>
<div>[1] TDSS Rootkit: a case study, Alisa Shevchenko, VB April 2009 <br> [2] <a href="https://web.archive.org/web/20180418182613/http://www.esagelab.com/projects/#tdss_remover">http://www.esagelab.com/projects/#tdss_remover</a></div>
<p class="author" style="padding-left: 0px;"><br>Last updated: 17.03.2012</p>
</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20180418182613/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20180418182613/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20180418182613/http://nobunkum.ru/rss">/rss</a></p>
  </div>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-3546318-9']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://web.archive.org/web/20180418182613/https://ssl' : 'https://web.archive.org/web/20180418182613/http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


</body></html>
<!--
     FILE ARCHIVED ON 18:26:13 Apr 18, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:19:09 May 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.885
  exclusion.robots: 0.267
  exclusion.robots.policy: 0.251
  esindex: 0.014
  cdx.remote: 7.776
  LoadShardBlock: 279.212 (3)
  PetaboxLoader3.datanode: 111.883 (4)
  PetaboxLoader3.resolve: 574.547 (2)
  load_resource: 425.357
-->