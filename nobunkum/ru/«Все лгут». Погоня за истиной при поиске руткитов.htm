<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
	<link rel="stylesheet" type="text/css" href="%C2%AB%D0%92%D1%81%D0%B5%20%D0%BB%D0%B3%D1%83%D1%82%C2%BB.%20%D0%9F%D0%BE%D0%B3%D0%BE%D0%BD%D1%8F%20%D0%B7%D0%B0%20%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B5%20%D1%80%D1%83%D1%82%D0%BA%D0%B8%D1%82%D0%BE%D0%B2_files/banner-styles.css">
	<link rel="stylesheet" type="text/css" href="%C2%AB%D0%92%D1%81%D0%B5%20%D0%BB%D0%B3%D1%83%D1%82%C2%BB.%20%D0%9F%D0%BE%D0%B3%D0%BE%D0%BD%D1%8F%20%D0%B7%D0%B0%20%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B5%20%D1%80%D1%83%D1%82%D0%BA%D0%B8%D1%82%D0%BE%D0%B2_files/iconochive.css">
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>«Все лгут». Погоня за истиной при поиске руткитов</title>
	<link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/rss">
	<link rel="stylesheet" type="text/css" href="%C2%AB%D0%92%D1%81%D0%B5%20%D0%BB%D0%B3%D1%83%D1%82%C2%BB.%20%D0%9F%D0%BE%D0%B3%D0%BE%D0%BD%D1%8F%20%D0%B7%D0%B0%20%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B5%20%D1%80%D1%83%D1%82%D0%BA%D0%B8%D1%82%D0%BE%D0%B2_files/style.css">
<!--[if lt IE 8]>
	<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
	<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/"><img src="%C2%AB%D0%92%D1%81%D0%B5%20%D0%BB%D0%B3%D1%83%D1%82%C2%BB.%20%D0%9F%D0%BE%D0%B3%D0%BE%D0%BD%D1%8F%20%D0%B7%D0%B0%20%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B5%20%D1%80%D1%83%D1%82%D0%BA%D0%B8%D1%82%D0%BE%D0%B2_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li><a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li class="current"><a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div id="content_text" style="margin-top: -10px;">
<div id="content_title"><h1>«Все лгут». Погоня за истиной при поиске руткитов</h1></div>
<div id="article_author" class="author">Алиса Шевченко, Esage Lab<br><a href="https://web.archive.org/web/20170914045703/mailto:alisa@esagelab.ru">alisa@esagelab.ru</a> / <a href="https://web.archive.org/web/20170914045703/http://twitter.com/alisaesage" target="_blank">@alisaesage</a></div>
<div id="article_author" class="author">Дмитрий Олексюк, Esage Lab<br><a href="https://web.archive.org/web/20170914045703/mailto:dmitry@esagelab.ru">dmitry@esagelab.ru</a></div><br>


<div style="padding-left: 14px;">
<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#intro">Вступление</a><br>
<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#standard">Стандартные способы получения информации о системе</a><br>
<div style="padding-left: 14px;">
	<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#global">Восстановление ядра</a><br>
	<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#deeper">Углубление в систему</a><br>
</div>
<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#solution">Альтернативное решение</a><br>

<div style="padding-left: 14px;">
	<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#details">Детали техники</a><br>
	<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#downsides">Недостатки</a><br>
	<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#bypassing">Обход</a><br>
	<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#advantages">Преимущества</a><br>
</div>
<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#outro">Заключение</a><br>
<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#reference">Ссылки</a><br>
</div> 

<a id="a_title" name="intro" style="text-decoration: none;"><h2>Вступление</h2></a>

Задача охотника за руткитами – будь то человек или программа – сводится к
 получению правдивой информации, на основании которой можно судить о 
состоянии системы. У руткита диаметрально противоположная задача: любыми
 способами скрыть истинное положение вещей. В силу такого конфликта 
интересов охотник за руткитами вынужден в своих поисках исходить из 
презумпции ложности любых полученных данных и непрерывно изыскивать 
такие источники информации, которые могут быть сочтены доверенными в 
потенциально модифицированной руткитом системе.<br>
<br>
Проще говоря, выбор правильных источников информации – краеугольный 
камень задачи о поиске руткитов. Это также и динамический процесс, 
поскольку с течением времени и эволюции руткитостроения доверенные 
источники информации имеют свойство утрачивать свою правдивость.<br>
<br>
В данной статье мы хотели бы осветить один достаточно простой, и, вместе
 с тем, более эффективный и безопасный, чем общепринятые, метод 
получения информации о системе. Вначале мы вкратце рассмотрим 
преимущества и ограничения существующих технологий, широко применяемых в
 антивирусах и антируткитах. После этого мы приведем детали 
предлагаемого метода, его плюсы и минусы, очевидные пути обхода и пример
 практической реализации.

<a id="a_title" name="standard" style="text-decoration: none;"><h2>Стандартные способы получения информации о системе</h2></a>

В современных антивирусах и антируткитах применяются различные подходы к
 выявлению аномалий, характерных для модифицированной руткитом системы: 
сопоставление полученных из разных источников списков объектов, 
сопоставление системных структур и кода с доверенной моделью и поиск 
отклонений в них.<br>
<br>

Независимо от конкретного подхода к поиску аномалий, выбор механизмов 
сбора потенциально доверенной информации о системе – т.е. информации, 
потенциально не искаженной вмешательством руткита – ограничен. 
Фактически, он сводится к двум опциям.
<ol>
<li>Восстановление предположительно модифицированных участков кода ядра (global unhooking) перед сбором информации о системе.
</li><li>Сбор информации с более глубокого уровня архитектуры системы, чем наиболее глубокий предполагаемый уровень rootkit-модификаций.
</li></ol>
	
	<a id="a_title" name="global" style="text-decoration: none;"><h3>Восстановление ядра</h3></a>
	
Восстановление участков кода ядра – это способ нейтрализовать эффекты 
руткита глобально, для системы в целом. Обычно в рамках этого подхода 
восстанавливают таблицу SDT, некоторое количество кода в начале 
системных функций, IRP-обработчики – и, в общем, все системные 
структуры, подозреваемые в модификации (см. Рис. 1).<br>
<br><center><img src="%C2%AB%D0%92%D1%81%D0%B5%20%D0%BB%D0%B3%D1%83%D1%82%C2%BB.%20%D0%9F%D0%BE%D0%B3%D0%BE%D0%BD%D1%8F%20%D0%B7%D0%B0%20%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B5%20%D1%80%D1%83%D1%82%D0%BA%D0%B8%D1%82%D0%BE%D0%B2_files/el1.gif" width="270"><br><i>Рис. 1. Rootkit-модификация ядра</i></center><br>
	
В процессе разработки алгоритмов восстановления структур ядра разработчик сталкивается с несколькими сложностями.
<ol>
<li>Поиск или вычисление «чистых» указателей на системные вызовы, 
IRP-обработчики и т.д., используемые впоследствии для восстановления 
цепочек системных вызовов. Также – поиск оригинальных системных файлов, 
из которых можно восстановить модифицированные участки ядра. 

</li><li>Различение безвредных модификаций и перехватов, установленных 
легитимным программным обеспечением (например, фаерволом или 
антивирусом).
</li><li>Обеспечение безопасности алгоритма. Поскольку ядро системы 
непрерывно используется, запись в исполняемые регионы памяти ядра в 
определенных обстоятельствах может привести к BSOD.
</li></ol>

Единственное преимущество глобального восстановления структур ядра 
заключается в том, что при удачном стечении обстоятельств удается 
полностью развеять «магию» руткита, возвращая всем приложениям в системе
 полный доступ к неискаженной системной информации.<br>
<br>
Вместе с тем, техника глобального восстановления структур ядра обладает рядом существенных недостатков.
<ol><li><b>Небезопасность.</b> Модификация структур в работающем ядре – рискованная операция при любых условиях.
</li><li><b>Ненадежность.</b> Руткит может в любой момент восстановить свои перехваты.
</li><li><b>Бессистемность.</b> Должны быть указаны конкретные структуры
 и участки кода, подлежащие восстановлению, что позволяет руткиту 
скрыться в непредусмотренной локации.

</li><li><b>Трудоемкость.</b> Получение оригинальных указателей на системные функции и различение вредоносных модификаций и перехватов от безопасных.
</li></ol>

С учетом приведенных недостатков можно утверждать, что глобальное 
восстановление структур ядра – скорее, примитивная реакция на известные 
угрозы, чем универсальный способ получения неискаженной информации. 
Кроме того, вследствие небезопасности данного подхода, он не может 
использоваться (и обычно не используется) в защитных решениях, 
претендующих на высокую надежность.

	<a id="a_title" name="deeper" style="text-decoration: none;"><h3>Углубление в систему</h3></a>
	
Поскольку архитектура Windows NT имеет многоуровневую структуру, 
информация, проходящая по цепочке от ядра до API и прикладных программ, 
может быть перехвачена на различных участках этой цепочки. Таким 
образом, антируткит может попытаться обойти искаженные элементы цепочки,
 если будет запрашивать информацию с ее участков, исполнительно 
предшествующих предположительной модификации.<br>
<br>
Этот подход намного безопаснее и универсальнее, чем предыдущий, но так же ограничен рядом недостатков.
<ol>
<li>Трудоемкость. Углубляясь в систему, разработчик вынужден 
самостоятельно обеспечивать абстракции и преобразования информации, 
которые в норме обеспечиваются высокоуровневыми механизмами. 
</li><li>Стратегическая неэффективность. Углубление в систему 
стимулирует «гонку вооружений», поскольку достаточно очевидно обходится 
ответным углублением противника.
</li></ol>

Типичный пример гонки вооружений: руткит перехватывает системные вызовы с
 целью маскировки файлов – антируткит обращается к драйверу файловой 
системы – руткит перехватывает обработчики прерываний драйвера файловой 
системы – антируткит обращается к драйверу диска, и так далее.<br>
<br>
В конце концов разработчик защиты вынужден эмулировать всю операционную систему, чтобы обойти руткит.


<a id="a_title" name="solution" style="text-decoration: none;"><h2>Альтернативное решение</h2></a>
Из всех недоверенных источников информации, собственные источники 
являются наименее недоверенными. Антируткит может выполнять системные 
вызовы самостоятельно, если он оснащен собственной, заведомо чистой 
копией ядра. Это «дешевый» способ получить чистую информацию в обход 
искажающих модификаций, не рискуя стабильностью системы.<br>
<br>
Использование собственного ядра, правильно полученного и настроенного, 
позволяет надежно детектировать большинство современных руткитов ядра. В
 частности, облегченная реализация данной техники (описанная ниже в этой
 статье) позволяет обнаруживать объекты, скрытые посредством модификации
 таблицы SDT и кода ядра. Более сложная реализация позволит 
детектировать практически любой руткит ядра.

	<a id="a_title" name="details" style="text-decoration: none;"><h3>Детали техники</h3></a>
	
Создание работающей копии ядра относительно просто и может быть реализовано посредством следующего алгоритма. (См. Рис. 2).
<ol>
<li>Поиск необходимых исполняемых файлов.<br>

 Для минимальной реализации работающей копии ядра достаточно двух 
файлов: основной файл ядра (в большинстве случаев – ntoskrnl.exe) и 
hal.dll. Поскольку пути к этим файлам могут быть подменены руткитом, их 
рекомендуется вычислять посредством анализа аппаратной конфигурации, 
описанного ниже.
</li><li>Загрузка файлов в память.<br>
Чтение файлов рекомендуется осуществлять методом прямого доступа к диску, чтобы снизить вероятность подложных данных. 
</li><li>Релокация указателей и инициализация переменных. <br>
В норме, все переменные ядра в собственной копии должны быть 
инициализированы вручную. Но, поскольку это трудоемко и не является 
критичным для детектирования большинства руткитов, переменные могут быть
 скопированы из глобальной копии ядра, за исключением наиболее 
критичных, часто модифицируемых руткитом (таких как pIofCallDriver и 
pIofCompleteRequest).
</li><li>Временная блокировка механизма системных нотификаторов.<br>
Легитимные callback механизмы не должны вмешиваться в работу 
антируткита. Отключить их можно патчингом функции 
ExReferenceCallBackBlock так, чтобы она во время работы антируткита 
безусловно возвращала нулевое значение.
</li><li>Перенаправление собственных вызовов ядра на локальную копию.<br>
</li></ol>

<br><center><img src="%C2%AB%D0%92%D1%81%D0%B5%20%D0%BB%D0%B3%D1%83%D1%82%C2%BB.%20%D0%9F%D0%BE%D0%B3%D0%BE%D0%BD%D1%8F%20%D0%B7%D0%B0%20%D0%B8%D1%81%D1%82%D0%B8%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B5%20%D1%80%D1%83%D1%82%D0%BA%D0%B8%D1%82%D0%BE%D0%B2_files/el2.gif" width="500"><br><i>Рис. 2. Цепочка вызовов дубликата ядра</i></center><br>

Поскольку мы должны предполагать, что очевидные источники информации о 
пути к файлу ядра (такие как файл boot.ini или ключ реестра 
HKLM\System\CurrentControlSet\Control\SystemStartOptions “KERNEL”) могут
 быть подставными, рекомендуется использовать вычислительный алгоритм 
получения имени файла ядра. Последнее определяется двумя системными 
параметрами: количеством процессоров и поддержкой PAE (Physical Address 
Extension). <br>
<br>
<center>
<table border="1" bordercolor="#000000" cellpadding="4" cellspacing="0">
<tbody><tr bgcolor="#CCCCCC"><td>Имя файла ядра</td><td>Поддержка PAE</td><td>Мультипроцессорность</td></tr>
<tr><td>ntoskrnl.exe </td><td align="center">-</td><td align="center">-</td></tr>
<tr><td>ntkrnlpa.exe</td><td align="center">+</td><td align="center">-</td></tr>

<tr><td>ntkrnlmp.exe</td><td align="center">-</td><td align="center">+</td></tr>
<tr><td>ntkrpamp.exe</td><td align="center">+</td><td align="center">+</td></tr>
</tbody></table>
</center>
  
	<a id="a_title" name="downsides" style="text-decoration: none;"><h3>Недостатки</h3></a>

<ol>	
<li>Некоторые типы руткитов принципиально не могут быть обнаружены при 
использовании данной техники. Это вредоносные программы, использующие 
для маскировки перехваты IRP и драйвера-фильтры.
</li><li>Не существует тривиального способа очистить память, 
использованную под копию ядра, при завершении процесса антируткита. Для 
того чтобы при последующих запусках антируткита не происходило засорение
 памяти, можно хранить адрес копии ядра в реестре.

</li><li>Собственная копия ядра позволяет антируткиту легко обнаружить 
скрытые объекты, но не позволяет легко их удалить, поскольку работающий 
код руткита остается в памяти и может в любой момент восстановить 
удаленные объекты. Для решения этой проблемы рекомендуется программно 
инициировать холодную перезагрузку непосредственно после удаления 
скрытых объектов.
</li></ol>

	<a id="a_title" name="bypassing" style="text-decoration: none;"><h3>Обход</h3></a>

	Пути обхода данной техники сводятся к фальсификации или блокированию 
тех немногочисленных внешних источников информации, на которые 
полагается антируткит. В частности, путей и содержимого файлов, 
используемых для построения собственной копии ядра. Рассмотрим некоторые
 примеры обходов с решениями.
<ol><li>Руткит может подставить антируткиту модифицированный файл ntoskrnl.exe при его чтении с диска.
Решение: проверка подписи Microsoft. 
</li><li>Руткит может подставить ложный путь к файлу ядра.
Решение: получение имени файла посредством анализа аппаратной конфигурации.
</li><li>Руткит может заблокировать чтение файлов ядра.
Маловероятно, так как это может нарушить функционирование легитимных приложений.
</li></ol>

	<a id="a_title" name="advantages" style="text-decoration: none;"><h3>Преимущества</h3></a>

<ol>
<li>Безопасность. Грамотные манипуляции с собственной копией ядра 
абсолютно безопасны, в отличие от манипуляций с работающим кодом ядра.
</li><li>Надежность. Руткит никогда не сможет установить перехваты в 
локальной копии ядра и, таким образом, исказить получаемую антируткитом 
информацию, поскольку ничего не знает о местонахождении копии.
</li><li>Правдивость. Код ядра, прочитанный с диска вручную и 
инсталлированный с соответствующей предусмотрительностью, гарантированно
 целостен. Это значит, что любые данные, полученные посредством вызова 
функций из данной копии, гарантированно чисты – если только не 
модифицирован сам источник данных. 
</li></ol>

<a id="a_title" name="outro" style="text-decoration: none;"><h2>Заключение</h2></a>

Не претендуя на панацею, описанная в данной статье техника представляет 
собой дешевый и безопасный способ обнаружить деятельность большинства 
руткитов ядра посредством обнаружения скрытых ими объектов. <br>
<br>
В качестве проверки практической ценности предложенной техники, мы разработали утилиту на ее основе: Trojan.Win32.TDSS remover. <a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#reference">[1]</a> Утилита «заточена» под детектирование и лечение руткита TDSS<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/everybody-lies#reference">[2]</a>, хотя по своим возможностям представляет собой достаточно универсальный антируткит. <br>

<br>
Несмотря на то, что качественная реализация описанной техники достаточно
 тривиальна и безопасна, нам не известны прецеденты ее применения в 
антивирусных программах и антируткитах. <br>

<a id="a_title" name="reference" style="text-decoration: none;"><h2>Ссылки</h2></a>

[1] Esage Lab, <a href="https://web.archive.org/web/20170914045703/http://www.esagelab.ru/resources.php?s=tdss_remover">Trojan.Win32.TDSS remover</a> <br>
[2] Алиса Шевченко, <a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/tdss-analysis">Анализ руткита TDSS</a>
<p class="author" style="padding-left: 0px;"><br>Last updated: 17.03.2012</p>

</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20170914045703/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20170914045703/http://www.nobunkum.ru/rss">/rss</a></p>
  </div>
</body></html>