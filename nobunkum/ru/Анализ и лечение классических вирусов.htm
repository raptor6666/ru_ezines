<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"><head><script type="text/javascript" async="" src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/ga.js"></script><script src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app210.us.archive.org';v.server_ms=338;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.pc(0.001);
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://nobunkum.ru:80/ru/file-infectors","20180427234751","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1524872871");
</script>
<link rel="stylesheet" type="text/css" href="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Анализ и лечение классических вирусов</title>
  <!-- base href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/" -->
  <link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/rss">
  <link rel="stylesheet" type="text/css" href="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/style.css">
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display: block; direction: ltr;">
</div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20180427234751/http://nobunkum.ru:80/ru/file-infectors</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://nobunkum.ru/ru/file-infectors","20180427234751",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
      <div class="subscribe">
        
<form action="/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors" method="post">
<div>
<input class="mail" type="text" name="email" placeholder="newsletter">
<input type="hidden" name="groups[]" value="1">
<input class="submit" type="submit" value="OK"></div>
</form>
      </div>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li class="current"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div class="aside-long" style="text-align:center;padding:15px 10px">
      <span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=Exploit.SWF.Agent.br">Exploit.SWF.Agent.br</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=Pdfka.asd">Pdfka.asd</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=Pidief.cvl">Pidief.cvl</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=TDSS">TDSS</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=TDSS+removal">TDSS removal</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=binary+planting">binary planting</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=bios+infection">bios infection</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=blind+sqli">blind sqli</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=bootkit">bootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=bootkit+remover">bootkit remover</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=browser+exploitation">browser exploitation</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=com+hijacking">com hijacking</a></span>
<span class="tl-tag tl-tag-weight4"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=disassembling">disassembling</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=dll+hijacking">dll hijacking</a></span>
<span class="tl-tag tl-tag-weight2"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=drive-by+downloads">drive-by downloads</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=hack+online+banks">hack online banks</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=heap-spray">heap-spray</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=hijack+botnet">hijack botnet</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=ibank">ibank</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=kernel+protection">kernel protection</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=kernel-mode+rootkit">kernel-mode rootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=keylogger">keylogger</a></span>
<span class="tl-tag tl-tag-weight5"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=malware+analysis">malware analysis</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=rootkit+detection">rootkit detection</a></span>
<span class="tl-tag tl-tag-weight3"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=trojan">trojan</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/tags?tag=virus+removal">virus removal</a></span>
    </div>
    <div style="margin-top: -10px;" ﻿="">
<h1>Анализ и лечение классических вирусов</h1>
<p class="author">Андрей Рассохин<br>специалист по информационной безопасности, Esage Lab<br><a href="https://web.archive.org/web/20180427234751/mailto:andrey@esagelab.com">andrey@esagelab.com</a></p>

<ul class="toc">
  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s1">Обзор вирусных технологий</a>
	<ul>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s2">Добавление новой секции</a></li>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s3">Расширение последней секции</a></li>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s4">Заражение методом EPO (Entry Point Obscuring)</a></li>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s5">Оверлейное заражение</a></li>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s6">Модификация секций</a></li>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s7">Заражение динамической библиотекой</a></li>
	  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s8">Метод «украденных байт»</a></li>
	</ul>
  </li>
  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s9">Анализ Win32.Parite.C</a></li>
  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s10">Лечение Win32.Parite.C</a></li>
  <li><a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/file-infectors#s11">Список литературы</a></li>
</ul>


<p>Будучи актуальной угрозой, вредоносные программы представляют собой 
популярную тему современных новостей. Часто вместо термина «вредоносная 
программа», подразумевающего самостоятельный, целенаправленно 
разработанный исполняемый файл, используется старый термин «вирус». 
Между тем, техника распространения вредоносного кода путём заражения 
исполняемых файлов, благодаря которой и возник термин «компьютерный 
вирус», давно отошла в прошлое — примерно тогда, когда повсеместное 
распространение интернета вытеснило дискеты как средство для обмена 
данными между пользователями. На смену вирусам пришли трояны и черви.</p>

<div class="aside">
<h3>Приложение к статье</h3>
Исходный код утилиты для лечения вируса Win32.Parite.C<br><br>
<a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/files/file-infectors/nb3-file-infectors.zip">Загрузить архив</a>
</div>

<p>Но история циклична: по мере исчерпания тех или иных методов решения 
насущных задач, разработчики вредоносного кода обращаются к старым 
техникам, приспосабливая их под новые условия. В рамках этой тенденции, в
 последние годы техника инфицирования исполняемых модулей вновь стала 
актуальна — с тем отличием, что заражение исполняемых файлов теперь 
решает задачу не распространения, а сокрытия и самозащиты вредоносной 
программы. Современные файловые инфекторы — это «профессиональные» 
вредоносные программы, реализующие сложные технологии: заражение 
системных драйверов (TDSS, ZeroAccess) и полиморфное заражение обычных 
исполняемых файлов (Virut, Sality).</p>

<p>В контексте этой тенденции актуально вновь поднять тему файловых 
инфекторов. Одна из задач данной статьи — представить обзор известных на
 сегодняшний день техник заражения исполняемых файлов. Во второй части 
статьи рассматривается «шаг за шагом» процесс анализа и разработки 
процедуры лечения для относительно старого, но не потерявшего своей 
актуальности файлового инфектора Win32.Parite.C.</p>

<h2 id="s1">Обзор вирусных технологий</h2>

<p>Существует необозримое множество методов заражения исполняемых файлов
 и передачи управления на внедренный вредоносный код. Выделим 
фундаментальные техники, которые чаще всего применяются разработчиками 
вирусов.</p>

<h3 id="s2">Добавление новой секции</h3>

<p>Это самый распространённый метод заражения файлов, не утрачивающий 
своей популярности вопреки его успешному обнаружению всеми антивирусами.
  Суть данного метода заключается в добавлении секции в конец 
исполняемого файла. Далее, вирус пересчитывает размер образа всего файла
 (<code>SizeOfImage</code>), выставляет на секцию нужные флаги, включая флаг исполнения (0x20000000), и меняет точку входа (<code>EntryPoint</code>) на начало новой секции.</p>

<p>При запуске заражённого файла сначала выполнится код из вирусной 
секции, а затем произойдет переход на оригинальную точку входа (Original
 Entry Point, OEP). Обычно такой переход осуществляется с помощью 
следующих инструкций процессора:</p>

<pre>jmp     OEP

call    OEP

push    OEP
retn</pre>

<p>Для лечения файлов, заражённых описанным методом, достаточно удалить 
последнюю секцию и восстановить оригинальную точку входа. Лечение 
затрудняется, если запутан алгоритм вычисления точки входа, или если 
адрес точки входа зашифрован. Обычно шифрование адреса точки входа 
осуществляется с помощью простого алгоритма типа XOR, но встречаются и 
намного более сложные случаи.</p>

<h3 id="s3">Расширение последней секции</h3>

<p>Это также один из наиболее популярных методов заражения исполняемых 
файлов. Вирус получает указатель на последнюю секцию исполняемого файла и
 увеличивает её атрибуты физического размера (<code>SizeOfRawData</code>) и виртуального размера (<code>VirtualSize</code>), тем самым расширяя секцию. Затем вирус пересчитывает размер образа (<code>SizeOfImage</code>)
 и выставляет на последнюю секцию нужные флаги, включая флаг исполнения 
(0x20000000), вычисляет новую точку входа и заменяет оригинальную.</p>

<p>Лечение вирусов описанного типа также не вызывает затруднений, если 
точка входа указывает на начало добавленных данных расширенной секции: 
достаточно удалить все данные от вирусной точки входа до конца файла, 
исправить адрес точки входа, значения виртуального и физического 
размеров редактируемой секции и пересчитать размер образа файла.</p>

<p>Однако встречаются и более сложные случаи: например, вирус может 
добавлять «мусорные» инструкции в начало кода заражения и направлять 
точку входа в середину массива данных, состоящих из большого количества 
взаимосвязанных безусловных переходов. Это затрудняет поиск границы 
между реальными данными последней секции и внедрённым кодом. В таком 
случае следует учитывать, что для лечения заражения достаточно 
восстановления оригинальной точки входа, в то время как физическое 
удаление вирусного кода является в большей степени эстетической мерой.</p>

<h3 id="s4">Заражение методом EPO (Entry Point Obscuring)</h3>

<p>Большинство вирусов для передачи управления на свой код изменяют 
точку входа заражаемой программы. Но в данном случае переход на 
вредоносный код осуществляется из оригинального кода программы без 
изменения точки входа.</p>

<p>Для осуществления заражения вирус ищет в секции, из которой начинается выполнение программы, опкод инструкции типа <code>call</code> (E8) или <code>jmp</code>
 (E9), после чего подставляет в эту инструкцию адрес перехода на 
вирусный код. Последний при этом может храниться в произвольном участке 
файла: в расширенной последней секции, в добавленной секции, в конце 
последней секции и т.п.</p>

<p>Для лечения вирусов этого типа не существует универсального подхода. В
 общем случае, необходимо найти адрес перехода оригинальной инструкции <code>call</code> или <code>jmp</code> и восстановить изменённую инструкцию с последующем удалением вредоносного кода из тела исполняемого файла.</p>

<p>Учитывая, что большинство EPO-вирусов добавляют новую секцию или 
расширяют последнюю секцию, такие вирусы могут быть выявлены путем 
поиска в коде программы инструкций типа <code>call</code> или <code>jmp</code>, которые передают управление коду, находящемуся в последней секции.</p>

<h3 id="s5">Оверлейное заражение</h3>

<div class="aside"><p><strong>Оверлей</strong> — часть исполняемого файла, которая не проецируется загрузчиком в память. Чаще всего оверлей находится в конце файла.</p></div>

<p>Суть этого метода заключается в том, что основная часть вирусного кода хранится в <em>оверлее</em>.
 Вирус заражает файл любым из вышеописанных способов, а затем добавляет в
 него оверлей, в котором хранится дополнительный фрагмент вредоносного 
кода. При запуске зараженного файла управление получает первая часть 
вирусного кода. Она выделяет память для второй части кода, хранящейся в 
оверлее, устанавливает для этой памяти флаг исполнения, считывает 
оверлей из файла в выделенную память и передает на него управление.</p>

<p>Лечение заражённого файла в данном случае сводится к удалению оверлея
 и его загрузчика. Для удаления оверлея — если достоверно известно, что в
 нём хранится только вирус — достаточно получить его смещение в файле, 
сложив значения атрибутов <code>PointerToRawData</code> и <code>SizeOfRawData</code> последней секции, и обрезать файл до полученного размера.</p>

<h3 id="s6">Модификация секций</h3>

<p>Манипулирование секциями исполняемого файла является более искусным 
методом заражения. Автору встречались на практике только две 
разновидности данного метода: с заменой секции таблицы переадресаций 
(relocation table, в заголовке модуля обычно именуемой <code>.reloc</code>) и со сдвигом секции ресурсов (обычно — <code>.rsrc</code>).</p>

<p>В первом случае вирус внедряет свой код вместо секции с таблицей 
переадресаций и перенаправляет на него точку входа. После того, как 
внедренный код отработал, вирус восстанавливает в памяти оригинальную 
секцию переадресаций, а затем передает управление на OEP.</p>

<p>Метод со сдвигом секции ресурсов применим только к файлам, в которых 
эта секция является последней. В таком случае вирус заражает своим кодом
 предпоследнюю секцию в файле, предварительно сдвинув секцию ресурсов.</p>

<p>Лечение вируса с заменой секции переадресаций заключается в 
восстановлении оригинальных данных этой секции и точки входа. Для 
лечения исполняемых файлов, в которых использовалась техника заражения 
предпоследней секции со сдвигом ресурсов, требуется также восстановить 
OEP и удалить все данные между вирусной точкой входа и секцией ресурсов.</p>

<h3 id="s7">Заражение динамической библиотекой</h3>

<p>Суть данной техники заключается в том, что код вируса располагается в
 отдельной динамической библиотеке, а переход на него из зараженного 
файла происходит путем вызова функции, экспортируемой из этой 
библиотеки.</p>

<p>Динамическая библиотека, содержащая в себе вирусную функцию, размещается в директории <code>%SYSTEMROOT%\system32</code>.
 Вирус заражает файл путем добавления в его таблицу импорта  имени 
библиотеки и имени (реже — порядкового номера) экспортируемой функции,  
после чего меняет адрес <code>ImportTable</code> на новый, внедряет в 
тело исполняемого файла вызов вирусной функции и направляет точку входа 
на этот вызов. После того, как вирусная функция отработана, вирус 
передает управление на OEP.</p>

<p>Лечение подобного заражения заключается в восстановлении точки входа и пересборке таблицы импорта.</p>

<h3 id="s8">Метод «украденных байт»</h3>

<p>Метод «украденных байт» — техника передачи управления вирусному коду, как и в случае с методом EPO.</p>

<p>В большинстве случаев вирусы изменяют оригинальную точку входа. 
Вместо этого можно «украсть» несколько байт оригинального кода 
программы, вставив вместо них инструкцию перехода на вредоносный код. 
Обычно подменяются байты в начале программы.</p>

<p>Лечение вирусов с «украденными» байтами требует поиска и 
восстановления всех таких байт. В том случае, если вирус, помимо «кражи»
 байт с точки входа, дополнительно модифицирует произвольные байты в 
секции кода и хранит их где-то в зашифрованном виде или переставляет 
между собой, анализ и лечение заражённых модулей существенно 
усложняются.</p>

<p>Вышеприведенный обзор дает представление об общих принципах и 
наиболее популярных методах заражения исполняемых файлов. Обычно 
разработчиками вирусов используются комбинации из различных техник, что 
делает анализ, лечение и отладку заражённых файлов более трудоемкими. 
Кроме того, иногда простой на первый взгляд алгоритм заражения может 
содержать в себе «подводные камни», затрудняющие лечение.</p>

<p>В качестве примера такого вируса, простого только на первый взгляд, рассмотрим полиморфный вирус Win32.Parite.C.</p>

<h2 id="s9">Анализ Win32.Parite.C</h2>

<div class="aside"><p>Offensive Computing. <a href="https://web.archive.org/web/20180427234751/http://www.offensivecomputing.net/?q=node/1533">Win32.Parite.B Unpacking and Anatomy Reversing and Network Analysis</a></p></div>

<p>Вирус Win32.Parite.C известен тем, что хранит основной вредоносный 
код в отдельной DLL размером около 180 кБ и реализует нестандартный 
метод защиты зараженных файлов. Глобальной эпидемии этого вируса не было
 зафиксировано, однако в 2003 году его образцы занимали почетные места в
 Top 20 вирусных угроз. В последнее время информация о данном семействе 
вирусов начинает появляться снова.</p>

<p>Образец этого вируса можно <a href="https://web.archive.org/web/20180427234751/http://vx.netlux.org/vl.php?dir=Virus.Win32.Parite">загрузить с сайта vx.netlux.org</a>. Для анализа будем использовать связку IDA Pro 5.5, HexRays 1.1 и IDAPython 2.5, а также Shadow OllyDbg и LordPE.</p>

<p>Как и многие другие файловые вирусы, Win32.Parite.C начинает поиск жертвы для заражения по маске <code>*.exe</code> в трех самых популярных местоположениях:</p>

<ol>
<li>в текущей директории;</li>
<li>на первом разделе жесткого диска;</li>
<li>в системных директориях — <code>%systemroot%</code> и <code>%systemroot%\system32</code>.</li>

</ol>

<div class="aside"><p>Iczelion. <a href="https://web.archive.org/web/20180427234751/http://win32assembly.online.fr/tutorials.html">Win32 Assembly Tutorials</a></p></div>

<p>Запустим образец вируса на виртуальной машине с установленной ОС 
Windows XP Pro SP3 и позволим ему заразить несколько файлов. Файлы для 
заражения рекомендуется выбирать простые, с хорошо известной структурой —
 таким образом, ее изменения в результате заражения файла будет проще 
обнаружить. Автор статьи использует для заражения файлы из уроков 
Iczelion. При написании данной статьи был использован исполняемый файл 
из урока 13.</p>

<p>После того, как вирус заразит исходный файл, внесенные им изменения 
можно просмотреть с помощью утилиты LordPE. Для этого следует открыть в 
LordPE оригинальный, незаражённый файл, нажав на кнопку «PE Editor», 
затем нажать кнопку «Compare» и открыть уже заражённый файл. Таким 
образом можно оценить, какие действия были совершены вирусом, без 
анализа процедуры заражения.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/1.jpg" width="420" height="229" alt="Сравнение зараженного и чистого файлов"><p>Сравнение зараженного и чистого файлов</p></div>

<p>В данном случае наблюдаются следующие изменения в структуре файла:</p>

<ul>
<li>существенное увеличение размера заражённого файла;</li>
<li>увеличение числа секций (<code>NumberOfSections</code>) на единицу;</li>
<li>изменение размера образа (<code>SizeOfImage</code>);</li>
<li>изменение точки входа (теперь она указывает на последнюю секцию);</li>
<li>установка флага исполнения для секции <code>.rdata</code>;</li>

<li>появление оверлея (заметим, что размер файла увеличился в несколько 
десятков раз, а физический размер последней секции очень мал).</li>
</ul>

<p>На первый взгляд, мы имеем дело с обычным файловым вирусом, который 
заражает файл методом добавления последней секции и добавления оверлея. 
Лечение такого типа заражения сводится к удалению последней секции до 
конца файла и восстановлению оригинальной точки входа.</p>

<p>Запустив заражённый файл в OllyDbg, мы получим предупреждение о том, 
что файл может быть упакован, так как точка входа не указывает в секцию 
кода. Попав на точку входа, видим слегка искажённый код, похожий на код 
расшифровки.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/2.jpg" width="400" height="303" alt="Код искаженного расшифровщика"><p>Код искаженного расшифровщика</p></div>

<p>При пошаговом исполнении (F8) становится ясно, что перед нами 
действительно код расшифровщика. Таким же способом дойдем до того 
момента, когда циклический переход по адресу 0x00405025 не будет 
осуществлен, либо поставим аппаратную точку останова на адрес 
0x00405027, продолжим выполнение файла (F9) и дождемся остановки.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/3.jpg" width="401" height="239" alt="Остановка на точке останова после цикла расшифровки"><p>Остановка на точке останова после цикла расшифровки</p></div>

<p>В результате отработки кода расшифровщика появилась инструкция <code>call</code>,
 которая скорее всего ведет на основной код. Теперь нужно путем 
трассировки (F8) найти переход на оригинальный код программы, чтобы 
узнать, где вирус хранит оригинальную точку входа.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/4.jpg" width="470" height="524" alt="Переход на OEP"><p>Переход на OEP</p></div>

<p>Итак, видно, что после исполнения инструкции <code>retn</code> по 
адресу 0x0040524A произойдет переход на OEP, так как в стек записана 
оригинальная точка входа. Похоже на стандартную комбинацию <code>push addr</code>; <code>retn</code>, за тем исключением, что отсутствует инструкция <code>push</code>. Однако, если присмотреться, то по адресу 0x00405242 можно увидеть запись данных из регистра <code>EDX</code> в стек (о чем свидетельствует значение регистра <code>ECX</code>, равное 0x0012FFC0). Еще выше по коду видно, что в <code>EDX</code> данные попадают из памяти по адресу <code>EDI+0Ch</code> и суммируются с данными из  памяти по адресу <code>EDI+08h</code>. По-видимому, таким образом происходит вычисление <code>ImageBase</code> и оригинальной точки входа.</p>

<p>Продолжим выполнение до адреса 0x00405237, перезапустив программу (Ctrl-F2).</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/5.jpg" width="460" height="341" alt="Остановка на записи в EDX оригинальной точки входа"><p>Остановка на записи в <code>EDX</code> оригинальной точки входа</p></div>

<p>Так и есть: OEP вычисляется из значения <code>ImageBase</code>, которое хранится по адресу памяти <code>EDI+08h</code>, и значения <code>EntryPoint</code>, которое хранится по адресу <code>EDI+0Ch</code>. Таким образом, адрес точки входа хранится в памяти непосредственно после значения <code>ImageBase</code>.</p>

<p>Если перезапустить программу в отладчике и подождать завершения цикла
 расшифровки, а затем посмотреть, какие данные хранятся по адресу, где 
только что была точка входа, то там окажется набор байт, непохожий на <code>EntryPoint</code>. Это значит, что либо по адресу хранения OEP происходит запись из другой точки программы, либо точка входа зашифрована.</p>

<p>Поставим аппаратную точку останова при записи на адрес, где будет храниться точка входа, и продолжим выполнение до остановки.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/6.jpg" width="444" height="325" alt="Остановка при обращении по адресу хранения точки входа"><p>Остановка при обращении по адресу хранения точки входа</p></div>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/7.jpg" width="410" height="142" alt="Карта памяти с отображением загруженного лишнего модуля"><p>Карта памяти с отображением загруженного лишнего модуля</p></div>

<p>Остановка произошла в неком модуле <code>pvf1</code> по адресу 
0x008F231E. Если продолжить выполнение до выхода из текущей функции 
(Ctrl-F9), то после завершения и остановки на инструкции <code>retn</code> по адресу, где предположительно должна появиться точка входа, появляется значение, очень похожее на <code>EntryPoint</code>. Значит, в модуле <code>pvf1</code> в функции по адресу, где сработала точка останова, и происходит расшифровка.</p>

<p>Для дальнейшего анализа удобнее использовать дизассемблер IDA. Сохранить модуль для анализа можно следующими способами:</p>

<ul>
<li>установить точку останова на процедуру <code>WriteFile</code> и после записи данных закрыть дескриптор самостоятельно и скопировать его для анализа;</li>
<li>выполнить код до вызова функции <code>CloseHandle</code>, которая освободит дескриптор файла, и скопировать его для анализа;</li>
<li>сохранить область памяти по адресу 0x008F0000 с помощью LordPE.</li>
</ul>

<p>Вручную загрузим модуль в IDA (manual load), указав в качестве <code>ImageBase</code>
 значение 0x008F0000. Перейдя (G) на адрес 0x008F231E и вызвав 
дополнение Hex-Rays (F5), получим псевдокод на C. Это и есть процедура 
декодирования точки входа. Трассировка кода процедуры в отладчике 
показывает, что декодирование происходит в цикле, отображенном на 
рисунке ниже:</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/8.jpg" width="699" height="136" alt="Дизассемблерный листинг цикла декодирования OEP"><p>Дизассемблерный листинг цикла декодирования OEP</p></div>

<p>В ходе исследования цикла в отладчике можно установить, что точка 
входа расшифровывается методом XOR. Декодирование происходит с 
использованием четырех различных ключей длиной по 4 байта. Значения 
ключей генерируются из двух разных массивов длиной по 8 байт каждый, 
находящихся по смещениям +28h относительно адреса, где должна храниться <code>ImageBase</code> (первый массив из 8 байт), и +0Сh относительно начала первой таблицы (второй массив из 8 байт).</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/9.jpg" width="272" height="77" alt="Адреса и данные таблиц для расшифровки"><p>Адреса и данные таблиц для расшифровки</p></div>

<p>Подготовка ключей происходит чуть выше процедуры декодирования, в цикле по адресу 0x008F22EE.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/10.jpg" width="704" height="229" alt="Дизассемблерный листинг цикла подготовки ключа"><p>Дизассемблерный листинг цикла подготовки ключа</p></div>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/11.jpg" width="685" height="145" alt="Псевдокод цикла подготовки ключа"><p>Псевдокод цикла подготовки ключа</p></div>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/12.jpg" width="853" height="263" alt="Псевдокод функции подготовки ключа"><p>Псевдокод функции подготовки ключа</p></div>

<p>Помимо вышеописанного, вирус заменяет два первых значения <code>ThunkValue</code> из таблицы импорта для <code>kernel32.dll</code> значениями, указывающими на <code>LoadLibraryA</code> и <code>GetProcAddress</code>.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/13.jpg" width="319" height="195" alt="Адреса памяти, где хранятся оригинальные ThunkValue"><p>Адреса памяти, где хранятся оригинальные <code>ThunkValue</code></p></div>

<p>Значение оригинальных <code>ThunkValue</code> вирус прячет по смещениям +1Ch и +20h относительно адреса значения <code>ImageBase</code>.</p>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/14.jpg" width="620" height="279" alt="Подменённые значения для kernel32.dll"><p>Подменённые значения для <code>kernel32.dll</code></p></div>

<p>Теперь, когда алгоритм разобран, можно приступить к лечению.</p>

<h2 id="s10">Лечение Win32.Parite.C</h2>

<p>Опишем вкратце схему лечения файлов, зараженных вирусом Win32.Parite.C.</p>

<ol>
<li>Вначале необходимо получить ключ расшифровки OEP. Поскольку в каждом
 инфицированном файле ключ хранится по разным адресам, запустим 
программу в режиме отладки и выставим точку останова на точку входа.</li>
<li>Когда сработает точка останова, найдем значение 75h, соответствующее коду инструкции <code>jnz short</code>, и выставим по найденному адресу вторую точку останова.</li>
<li>При каждом срабатывании второй точки останова будем проверять флаг <code>ZF</code>. Если он установлен, то код расшифрован, и можно приступить к поиску необходимых данных.</li>

<li>После расшифровки тела вируса становится возможным просканировать 
память от точки входа в сторону увеличения адресов, найти значение <code>ImageBase</code> и запомнить его адрес.</li>
<li>Далее, зная адрес значения <code>ImageBase</code>, можно вычислить 
адреса всех необходимых данных: зашифрованной точки входа, двух таблиц, 
из которых собирается ключ, и двух значений <code>ThunkValue</code>, «украденных» из таблицы импорта.</li>
<li>Имея все необходимые данные и зная алгоритм шифрования, мы можем 
расшифровать и восстановить точку входа, исправить импорты и удалить 
последнюю секцию, тем самым вылечив заражённый файл.</li>
<li>Полный исходный код для процедуры лечения находится в архиве, приложенном к данной статье.</li>
</ol>

<div class="figure"><img src="%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B8%20%D0%BB%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B2%D0%B8%D1%80%D1%83%D1%81%D0%BE%D0%B2_files/15.jpg" width="680" height="505" alt="Протокол работы утилиты лечения"><p>Протокол работы утилиты лечения</p></div>

<h2 id="s11">Список литературы</h2>

<ol>
  <li>Offensive Computing. <a href="https://web.archive.org/web/20180427234751/http://www.offensivecomputing.net/?q=node/1533">Win32.Parite.B Unpacking and Anatomy Reversing and Network Analysis</a>.</li>
  <li>Iczelion. <a href="https://web.archive.org/web/20180427234751/http://win32assembly.online.fr/tutorials.html">Win32 Assembly Tutorials</a>.</li>
</ol>

<p class="author" style="padding-left: 0px;">Last updated: 17.03.2012</p>

</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20180427234751/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20180427234751/http://www.nobunkum.ru/rss">/rss</a></p>
  </div>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-3546318-9']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://web.archive.org/web/20180427234751/https://ssl' : 'https://web.archive.org/web/20180427234751/http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


</body></html>
<!--
     FILE ARCHIVED ON 23:47:51 Apr 27, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:21:00 May 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 1.022
  exclusion.robots: 0.306
  exclusion.robots.policy: 0.286
  esindex: 0.017
  cdx.remote: 5.57
  LoadShardBlock: 45.489 (3)
  PetaboxLoader3.datanode: 63.852 (4)
  load_resource: 249.45
  PetaboxLoader3.resolve: 207.482
-->